#!/bin/bash

export TEXTDOMAIN=openscada
export TEXTDOMAINDIR=@datadir_full@/locale
tput init; TERM_REZ=$?
tmpfile=`mktemp`

StartOrigCfgPref=@sysconfdir_full@
StartOrigCfgFile=$StartOrigCfgPref/oscada_start.xml
StartWorkDir=@oscd_datadir_full@
WorkDir=$StartWorkDir
DESKTOP_DIR=
if [ -n "$(which xdg-user-dir)" ] && [ -n "$(xdg-user-dir DESKTOP)" ]; then DESKTOP_DIR="$(xdg-user-dir DESKTOP)"; fi

# Get the project name from filename openscada_{ProjName}
ProjName=`echo $0 | sed -n "/.*openscada_\(.*\)/s//\1/p"`;
# Get the project name from variable "OSCADA_ProjName"
if test "x$ProjName" = "x" -o "$ProjName" = "start"; then ProjName=$OSCADA_ProjName; fi
# Set the project name to default "start"
if test "x$ProjName" = "x" -o "$ProjName" = "start"; then
    if test $TERM_REZ = 0 -a -n "$(which dialog)" || test -n "$DISPLAY" -a -n "$(which kdialog || which zenity || which Xdialog)"; then
	prjList=("start" "<$(gettext "Default")>" "<new>" "<$(gettext "New project")>")
	if test ! -w $WorkDir/$ProjName; then
	    prjList=("${prjList[@]}" "<*>" "==== $(gettext "User directory copy projects") ===")
	    for fit in `ls ~/.openscada`; do
		if test -d ~/.openscada/$fit && test -f ~/.openscada/$fit/oscada.xml; then prjList=("${prjList[@]}" "$fit" "$fit"); fi
	    done
	    prjList=("${prjList[@]}" "<*>" "==== $(gettext "Pre-installed projects") ===")
	fi
	# Projects list obtaine from preinstalled projects
	for fit in `ls $StartWorkDir`; do
	    if test -d $StartWorkDir/$fit && test -f $StartOrigCfgPref/oscada_$fit.xml; then prjList=("${prjList[@]}" "$fit" "$fit"); fi
	done

	rez=
	if test $TERM_REZ = 0 -a -n "$(which dialog)"; then dialog --menu "$(gettext "Select project for start.")" 20 60 20 "${prjList[@]}" 2> $tmpfile; rez=`cat $tmpfile`;
	elif test -n "$(which kdialog)"; then rez=`kdialog --title "$(gettext "OpenSCADA start")" --menu "$(gettext "Select project for start.")" "${prjList[@]}"`;
	elif test -n "$(which zenity)"; then rez=`zenity --height=400 --width=300 --title "$(gettext "OpenSCADA start")" --list --text="$(gettext "Select project for start.")" --column="Tag" --column="Project" --hide-header --hide-column=1 "${prjList[@]}"`;
	elif test -n "$(which Xdialog)"; then Xdialog --title "$(gettext "OpenSCADA start")" --no-tags --menubox "$(gettext "Select project for start.")" 20 50 20 "${prjList[@]}" 2> $tmpfile; rez=`cat $tmpfile`; fi
	ProjName=$rez
	if test "x$ProjName" = "x" -o "x$ProjName" = "x<*>"; then ProjName=;
	# New project create
	elif test "x$ProjName" = "x<new>"; then
	    rez=
	    if test $TERM_REZ = 0 -a -n "$(which dialog)"; then dialog --inputbox "$(gettext "Enter new project ID. Do not use spaces!")" 10 50 2> $tmpfile; rez=`cat $tmpfile`;
	    elif test -n "$(which kdialog)"; then rez=`kdialog --title "$(gettext "OpenSCADA start")" --inputbox "$(gettext "Enter new project ID. Do not use spaces!")" 'NewProject'`;
	    elif test -n "$(which zenity)"; then rez=`zenity --title "$(gettext "OpenSCADA start")" --entry --text "$(gettext "Enter new project ID. Do not use spaces!")" --entry-text="NewProject"`;
	    elif test -n "$(which Xdialog)"; then Xdialog --title "$(gettext "OpenSCADA start")" --inputbox "$(gettext "Enter new project ID. Do not use spaces!")" 10 50 2> $tmpfile; rez=`cat $tmpfile`; fi
	    ProjName=$rez
	    if test "x$ProjName" = "x"; then ProjName=;
	    # Move and prepare start ico to desktop
	    elif [ -n "$DESKTOP_DIR" ] && [ ! -f "$DESKTOP_DIR/openscada_$ProjName.desktop" ]; then
		cp @datadir_full@/applications/openscada.desktop "$DESKTOP_DIR/openscada_$ProjName.desktop";
		subst "s/Exec=/Exec=OSCADA_ProjName=$ProjName /" "$DESKTOP_DIR/openscada_$ProjName.desktop"
		subst "s/\(^\(Generic\|\)Name\(=\|\\[.*\\]=\).*\)/\1: $ProjName/" "$DESKTOP_DIR/openscada_$ProjName.desktop"
	    fi
	fi
    else ProjName=start; fi
fi

rm -f $tmpfile

if [ -z "$ProjName" ]; then echo "$(gettext "No a project set!")"; exit 1; fi

echo "$(gettext "Set the project name to:") \"$ProjName\""

# Work directory check and prepare
StartCfgFile=$StartOrigCfgPref/oscada_$ProjName.xml
CfgFile=$StartCfgFile

## Check for work directory moving to user's home directory "~/.openscada" needs
if test -w $WorkDir -a ! -d $WorkDir/$ProjName; then mkdir -p $WorkDir/$ProjName; fi
if test ! -w $WorkDir/$ProjName; then
    WorkDir=~/.openscada
    if test ! -d $WorkDir/$ProjName; then
	mkdir -pm 700 $WorkDir/$ProjName;
	if test -d $StartWorkDir/$ProjName; then cp -R $StartWorkDir/$ProjName/* $WorkDir/$ProjName; fi
    fi
    CfgFile=$WorkDir/$ProjName/oscada.xml
    if test ! -e $CfgFile -a -f $StartCfgFile; then cp $StartCfgFile $CfgFile; fi
fi
if test ! -e $CfgFile -a -f $StartOrigCfgFile; then cp $StartOrigCfgFile $CfgFile; fi
## Check for local copy need for libraries DBs directory
if test -d $StartWorkDir/LibsDB -a ! -d $WorkDir/LibsDB; then cp -R $StartWorkDir/LibsDB $WorkDir; fi
if test ! -d $WorkDir/$ProjName/LibsDB -a ! -L $WorkDir/$ProjName/LibsDB; then ln -s ../LibsDB $WorkDir/$ProjName/LibsDB; fi
## Check for typical archives directory creation need
if test ! -d $WorkDir/$ProjName/ARCHIVES; then
    mkdir -pm 700 $WorkDir/$ProjName/ARCHIVES/MESS;
    mkdir -pm 700 $WorkDir/$ProjName/ARCHIVES/VAL;
fi

cd $WorkDir/$ProjName

# Programm command and lock file
pCmd="@bindir_full@/openscada --CoreDumpAllow --Config=$CfgFile --StatName=$ProjName"
pLock=".openscada.lock"

# Check for already started programm present
if [ -f $pLock ] && ps -Ao pid,command | grep "$(cat ${pLock})[ ]*${pCmd}" > /dev/null; then
    echo "OpenSCADA station \"$ProjName\" already started!";
    exit 1;
fi

# Call programm
$pCmd $@ &
pPid=$!

# Create lock file
echo $pPid > $pLock

# Wait for programm stop
wait $pPid
echo "Program rezult: $?"

# Core dump file "core" into work directory process
if [ -f $WorkDir/$ProjName/core -a -n "$(which gdb)" ]; then
    cd $WorkDir/$ProjName
    echo "Core dump process for back trace purchase to file crash_${ProjName}_$(date +%F_%H:%M).txt"
    gdb @bindir_full@/openscada --core core --batch --quiet -ex "thread apply all bt full" -ex "quit" > crash_${ProjName}_$(date +%F_%H:%M).txt
    rm -f core
fi

# Remove lock file
rm -f $pLock
