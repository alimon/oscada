
%{
//OpenSCADA system module DAQ.JavaLikeCalc file: func_analise.ypp
/***************************************************************************
 *   Copyright (C) 2005-2009 by Roman Savochenko                           *
 *   rom_as@fromru.com                                                     *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; version 2 of the License.               *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#include <tsys.h>
#include <tmess.h>
#include "freefunc.h"
#include "freelib.h"
#include "virtual.h"
#include <string.h>

#define YYERROR_VERBOSE true

namespace JavaLikeCalc
{
char m_buf[STR_BUF_LEN];
struct YYLTYPE;

int yylex( );
void yyerror( const char *s );
void sfErr( const string &mess, YYLTYPE *ps);

%}

/************************* GRAMMAR ****************************/
%union
{
    int	id;		//Function id
    Reg	*reg;		//Variable and Constant registers list index and function list index
    int	fp_cnt;		//Function parameters counter
    int	prg_cd;		//Programm code
    char op[21];	//Object's properties.
}

%token	ERR VAR_DIR IF ELSE WHILE FOR IN BREAK CONTINUE ADDEQ SUBEQ MULEQ DIVEQ BITSHLEFT BITSHRIGHT RETURN NEW ARRAY OBJECT
%token	<id>	FUNC B_FUNC B_FUNC1 B_FUNC2
%token	<reg>	VAR CONST
%token	<op>	O_PRP_F
%type	<reg>	var expr
%type	<prg_cd>	if if_expr end cycl
%type	<fp_cnt>	prmlst

%right	'=' ADDEQ SUBEQ MULEQ DIVEQ
%right	'?' ':'
%left	OR
%left	AND
%left	'|' '&' '^'
%left	'>' '<' GE LE EQ NE
%left	BITSHLEFT BITSHRIGHT
%left	'+' '-'
%left	'*' '/' '%'
%right	UN_MINUS '!' '~'
%right	INCREM DECREM

%%
root:	solver end
	| error	{ sfErr("",&yylloc); YYABORT; }
solver:	/*empty*/
	| solver solve
solve:  assign ';'
	| var ';'	{ $1->free(); }
	| IF '(' expr ')' if solve end
	    { try{ p_fnc->cdCond($3,$5,$7,$7); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| IF '(' expr ')' if solve end ELSE solve end
	    { try{ p_fnc->cdCond($3,$5,$7,$10); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| WHILE cycl '(' expr end ')' solve end
	    { try{ p_fnc->cdCycle($2,$4,$5,$8,0); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| FOR '(' assign ';' cycl expr end ';' assign end ')' solve end
	    { try{ p_fnc->cdCycle($5,$6,$10,$13,$7); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| FOR '(' var IN cycl expr end ')' solve end
	    { try{ p_fnc->cdCycleObj($5,$6,$7,$10,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| BREAK ';'	{ p_fnc->prg=p_fnc->prg+(char)Reg::Break; }
	| CONTINUE ';'	{ p_fnc->prg=p_fnc->prg+(char)Reg::Continue; }
	| RETURN ';'	{ p_fnc->prg+=(char)Reg::EndFull; }
	| RETURN expr ';'
	    {
		for( int i_io = 0; i_io < p_fnc->ioSize(); i_io++ )
		    if( p_fnc->io(i_io)->flg()&IO::Return )
		    {
			Reg *rez = p_fnc->regAt(p_fnc->regGet(p_fnc->io(i_io)->id()));
			if( !rez )
			{
			    rez = p_fnc->regAt(p_fnc->regNew(true));
			    rez->setName(p_fnc->io(i_io)->id());
			    rez->setVar(i_io); rez->setLock(true);
			}
			p_fnc->cdAssign(rez,$2);
			break;
		    }
		p_fnc->prg+=(char)Reg::EndFull;
	    }
	| FUNC '(' prmlst ')' ';'
	    { try{ p_fnc->cdExtFnc($1,$3,true); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| '{' solver '}'
var:	VAR			{ $$ = $1; }
	| VAR_DIR VAR		{ $2->setType(Reg::String); $$ = $2; }
	| var O_PRP_F		{ $$ = p_fnc->cdProp($1,$2); }
	| var '[' expr ']'	{ $$ = p_fnc->cdProp($1,"",$3); }
	| var O_PRP_F '(' prmlst ')'
	    { try{ $$ = p_fnc->cdObjFnc(p_fnc->cdProp($1,$2),$4); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
assign: var '=' expr
	    {
		try
		{
		    if( $1->type() == Reg::Free ) $1->setType($3->vType(p_fnc));
		    p_fnc->cdAssign($1,$3);
		} catch(TError err){ sfErr(err.mess,&@1); YYABORT; }
	    }
	| var ADDEQ expr
	    {
		try
		{
		    if( $1->type() == Reg::Free ) throw TError(p_fnc->nodePath().c_str(),_("Variable '%s' is used but undefined"),$1->name().c_str());
		    p_fnc->cdAssign($1,p_fnc->cdBinaryOp(Reg::Add,$1,$3));
		} catch(TError err){ sfErr(err.mess,&@1); YYABORT; }
	    }
	| var SUBEQ expr
	    {
		try
		{
		    if( $1->type() == Reg::Free ) throw TError(p_fnc->nodePath().c_str(),_("Variable '%s' is used but undefined"),$1->name().c_str());
		    p_fnc->cdAssign($1,p_fnc->cdBinaryOp(Reg::Sub,$1,$3));
		} catch(TError err){ sfErr(err.mess,&@1); YYABORT; }
	    }
	| var MULEQ expr
	    {
		try
		{
		    if( $1->type() == Reg::Free ) throw TError(p_fnc->nodePath().c_str(),_("Variable '%s' is used but undefined"),$1->name().c_str()); 
		    p_fnc->cdAssign($1,p_fnc->cdBinaryOp(Reg::Mul,$1,$3));
		} catch(TError err){ sfErr(err.mess,&@1); YYABORT; }
	    }
	| var DIVEQ expr
	    {
		try
		{
		    if( $1->type() == Reg::Free ) throw TError(p_fnc->nodePath().c_str(),_("Variable '%s' is used but undefined"),$1->name().c_str());
		    p_fnc->cdAssign($1,p_fnc->cdBinaryOp(Reg::Div,$1,$3));
		} catch(TError err){ sfErr(err.mess,&@1); YYABORT; }
	    }
	| var INCREM
	    {
		try
		{
		    if( $1->type() == Reg::Free ) throw TError(p_fnc->nodePath().c_str(),_("Variable '%s' is used but undefined"),$1->name().c_str());
		    Reg *reg = p_fnc->regTmpNew(); *reg = 1;
		    p_fnc->cdAssign($1,p_fnc->cdBinaryOp(Reg::Add,$1,reg));
		} catch(TError err){ sfErr(err.mess,&@1); YYABORT; }
	    }
	| var DECREM
	    {
		try
		{
		    if( $1->type() == Reg::Free ) throw TError(p_fnc->nodePath().c_str(),_("Variable '%s' is used but undefined"),$1->name().c_str());
		    Reg *reg = p_fnc->regTmpNew(); *reg = 1;
		    p_fnc->cdAssign($1,p_fnc->cdBinaryOp(Reg::Sub,$1,reg));
		} catch(TError err){ sfErr(err.mess,&@1); YYABORT; }
	    }
	| /*empty*/
expr:	CONST	{ $$ = $1; }
	| var
	    {
		try
		{
		    if( $1->type() == Reg::Free ) throw TError(p_fnc->nodePath().c_str(),_("Variable '%s' is used but undefined"),$1->name().c_str());
		    $$ = $1;
		} catch(TError err){ sfErr(err.mess,&@1); YYABORT; }
	    }

	| var '=' expr
	    {
		try
		{
		    if( $1->type() == Reg::Free ) $1->setType($3->vType(p_fnc));
		    p_fnc->cdAssign($1,$3);
		    $$ = $1;
		} catch(TError err){ sfErr(err.mess,&@1); YYABORT; }
	    }
	| var INCREM
	    {
		try
		{
		    if( $1->type() == Reg::Free ) throw TError(p_fnc->nodePath().c_str(),_("Variable '%s' is used but undefined"),$1->name().c_str());
		    $$ = p_fnc->cdMove(NULL,$1);
		    Reg *reg = p_fnc->regTmpNew(); *reg = 1;
		    p_fnc->cdAssign($1,p_fnc->cdBinaryOp(Reg::Add,$1,reg));
		} catch(TError err){ sfErr(err.mess,&@1); YYABORT; }
	    }
	| var DECREM
	    {
		try
		{
		    if( $1->type() == Reg::Free ) throw TError(p_fnc->nodePath().c_str(),_("Variable '%s' is used but undefined"),$1->name().c_str());
		    $$ = p_fnc->cdMove(NULL,$1);
		    Reg *reg = p_fnc->regTmpNew(); *reg = 1;
		    p_fnc->cdAssign($1,p_fnc->cdBinaryOp(Reg::Sub,$1,reg));
		} catch(TError err){ sfErr(err.mess,&@1); YYABORT; }
	    }
	| INCREM var
	    {
		try
		{
		    if( $2->type() == Reg::Free ) throw TError(p_fnc->nodePath().c_str(),_("Variable '%s' is used but undefined"),$2->name().c_str());
		    Reg *reg = p_fnc->regTmpNew(); *reg = 1;
		    p_fnc->cdAssign($2,p_fnc->cdBinaryOp(Reg::Add,$2,reg));
		    $$ = $2;
		} catch(TError err){ sfErr(err.mess,&@1); YYABORT; }
	    }
	| DECREM var
	    {
		try
		{
		    if( $2->type() == Reg::Free ) throw TError(p_fnc->nodePath().c_str(),_("Variable '%s' is used but undefined"),$2->name().c_str());
		    Reg *reg = p_fnc->regTmpNew(); *reg = 1;
		    p_fnc->cdAssign($2,p_fnc->cdBinaryOp(Reg::Sub,$2,reg));
		    $$ = $2;
		} catch(TError err){ sfErr(err.mess,&@1); YYABORT; }
	    }
	| B_FUNC '(' ')'		{ try{ $$ = p_fnc->cdBldFnc($1); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| B_FUNC1 '(' expr ')'		{ try{ $$ = p_fnc->cdBldFnc($1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| B_FUNC2 '(' expr ',' expr ')'	{ try{ $$ = p_fnc->cdBldFnc($1,$3,$5); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| FUNC '(' prmlst ')'		{ try{ $$ = p_fnc->cdExtFnc($1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| NEW ARRAY '(' prmlst ')'	{ try{ $$ = p_fnc->cdMviArray($4); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| NEW OBJECT '(' ')'		{ try{ $$ = p_fnc->cdMviObject(); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr '+' expr	{ try{ $$ = p_fnc->cdBinaryOp(Reg::Add,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr '-' expr	{ try{ $$ = p_fnc->cdBinaryOp(Reg::Sub,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr '*' expr	{ try{ $$ = p_fnc->cdBinaryOp(Reg::Mul,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr '/' expr { try{ $$ = p_fnc->cdBinaryOp(Reg::Div,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr '%' expr { try{ $$ = p_fnc->cdBinaryOp(Reg::RstI,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr '|' expr { try{ $$ = p_fnc->cdBinaryOp(Reg::BitOr,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr '&' expr { try{ $$ = p_fnc->cdBinaryOp(Reg::BitAnd,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr '^' expr { try{ $$ = p_fnc->cdBinaryOp(Reg::BitXor,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| '(' expr ')'	{ $$ = $2; }
	| expr OR expr	{ try{ $$ = p_fnc->cdBinaryOp(Reg::LOr,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr AND expr	{ try{ $$ = p_fnc->cdBinaryOp(Reg::LAnd,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr BITSHLEFT expr		{ try{ $$ = p_fnc->cdBinaryOp(Reg::BitShLeft,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr BITSHRIGHT expr		{ try{ $$ = p_fnc->cdBinaryOp(Reg::BitShRight,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr '<' expr { try{ $$ = p_fnc->cdBinaryOp(Reg::LT,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr '>' expr { try{ $$ = p_fnc->cdBinaryOp(Reg::GT,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr GE expr 	{ try{ $$ = p_fnc->cdBinaryOp(Reg::GEQ,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr LE expr 	{ try{ $$ = p_fnc->cdBinaryOp(Reg::LEQ,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr EQ expr 	{ try{ $$ = p_fnc->cdBinaryOp(Reg::EQU,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr NE expr 	{ try{ $$ = p_fnc->cdBinaryOp(Reg::NEQ,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| '!' expr	{ try{ $$ = p_fnc->cdUnaryOp(Reg::Not,$2); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| '~' expr	{ try{ $$ = p_fnc->cdUnaryOp(Reg::BitNot,$2); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| '-' expr %prec UN_MINUS { try{ $$ = p_fnc->cdUnaryOp(Reg::Neg,$2); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr if_expr expr end ':' expr end
	    { try{ $$ = p_fnc->cdCond($1,$2,$4,$7,$3,$6); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr O_PRP_F		{ $$ = p_fnc->cdProp($1,$2); }
	| expr '[' expr ']'	{ $$ = p_fnc->cdProp($1,"",$3); }
	| expr O_PRP_F '(' prmlst ')'
	    { try{ $$ = p_fnc->cdObjFnc(p_fnc->cdProp($1,$2),$4); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
prmlst: /*empty*/		{ $$ = 0; }
	| expr			{ $$ = 1; p_fnc->f_prmst.push_front($1); }
	| prmlst ',' prmlst	{ $$ = $1 + $3; }
if:	/*empty*/	{ $$ = p_fnc->prg.size(); p_fnc->prg=p_fnc->prg+(char)Reg::If+"RR00nn"; }
if_expr: '?'		{ $$ = p_fnc->prg.size(); p_fnc->prg=p_fnc->prg+(char)Reg::If+"RR00nn"; }
cycl:	/*empty*/	{ $$ = p_fnc->prg.size(); p_fnc->prg=p_fnc->prg+(char)Reg::Cycle+"RRbbaann"; }
end:	/*empty*/	{ p_fnc->prg+=(char)Reg::End; $$ = p_fnc->prg.size(); }
/************************* END OF GRAMMAR ****************************/
%%

void sfErr(const string &mess, YYLTYPE *ps)
{
    snprintf(m_buf,sizeof(m_buf),_("%s, pos: (%d,%d)-(%d,%d)."),
	mess.c_str(),ps->first_line,ps->first_column,ps->last_line,ps->last_column );
    yyerror(m_buf);
}

void yyerror( const char *s )
{
    p_fnc->p_err+=s;
}

int yylex( )
{
    unsigned int c, st_pos;
    int &pos = p_fnc->la_pos;
    string &prog = p_fnc->prg_src;

    if( pos == 0 ) { yylloc.last_line = yylloc.last_column = 1; }

retry:
    //> Empty space
    while( pos < prog.size() &&
	((c = prog[pos]) == ' ' || c == '\n' || c == '\t' ||
	c == '\f' || c == '\r' || c == '\v') )
    {
	if( c == '\n' )	{ yylloc.last_column = 1; yylloc.last_line++; }
	else yylloc.last_column++;
	pos++;
    }
    //> End string
    if( pos >= prog.size() ) return 0;
    //> Comentars // and /* ... */
    if( prog.substr(pos,2) == "//" )
    {
	pos+=2;
	while( pos < prog.size() && prog[pos] != '\n' ) pos++;
	goto retry;
    }
    if( prog.substr(pos,2) == "/*" )
    {
	pos+=2;
	while( pos < prog.size() && prog.substr(pos-1,2) != "*/" )
	{
	    if( prog[pos] == '\n' )	{ yylloc.last_column = 1; yylloc.last_line++; }
	    else yylloc.last_column++;
	    pos++;
	}
	pos++;
	goto retry;
    }

    yylloc.first_line = yylloc.last_line;
    yylloc.first_column = yylloc.last_column;

    //Number
    if( isdigit(c) || (c == '.' && (pos+1) < prog.size() && isdigit(prog[pos+1])) )
    {
	st_pos = pos;
	int tp = 0;	//Type constant (0-detect;1-dec;2-oct;3-hex;4-real)
	if( c == '.' )	tp = 4;
	else
	{
	    while( pos < prog.size() && isdigit(c=prog[pos]) )
	    { pos++; yylloc.last_column++; }
	    if( pos >= prog.size() )			tp = (prog[st_pos]=='0')?2:1;
	    else if( c == 'x' || c == 'X' )		tp = 3;
	    else if( c == '.' || c == 'e' || c == 'E' )	tp = 4;
	    else tp = (prog[st_pos]=='0')?2:1;
	}
	if( tp == 1 )
	{
	    yylval.reg = p_fnc->regTmpNew();
	    *yylval.reg = (int)strtol(prog.substr(st_pos,pos-st_pos).c_str(),NULL,10);
	    return CONST;
	}
	else if( tp == 2 )
	{
	    yylloc.last_column-=pos-st_pos;
	    pos = st_pos;
	    while( pos < prog.size() && (c=prog[pos]) >= '0' && c <= '7' )
	    { pos++; yylloc.last_column++; }

	    yylval.reg = p_fnc->regTmpNew();
	    *yylval.reg = (int)strtol(prog.substr(st_pos,pos-st_pos).c_str(),NULL,8);
	    return CONST;
	}
	else if( tp == 3 )
	{
	    pos++; yylloc.last_column++;
	    while( pos < prog.size() && (isdigit(c=prog[pos]) || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F') ) )
	    { pos++; yylloc.last_column++; }

	    yylval.reg = p_fnc->regTmpNew();
	    *yylval.reg = (int)strtol(prog.substr(st_pos,pos-st_pos).c_str(),NULL,16);
	    return CONST;
	}
	else if( tp == 4 )
	{
	    bool e_ok = (c=='e'||c=='E')?true:false;
	    pos++; yylloc.last_column++;
	    while( pos < prog.size() && (isdigit(c=prog[pos]) || c == 'E' || c == 'e' ||
		((c == '+' || c == '-') && ((prog[pos-1]) == 'e' || (prog[pos-1]) == 'E'))) )
	    {
		if( c=='E' || c=='e' )
		{
		    if( e_ok )	break;
		    else e_ok = true;
		}
		pos++; yylloc.last_column++;
	    }

	    yylval.reg = p_fnc->regTmpNew();
	    *yylval.reg = atof(prog.substr(st_pos,pos-st_pos).c_str());
	    return CONST;
	}
	else return 0;
    }
    //String
    if( c == '"' && (pos+1) < prog.size() )
    {
	st_pos = ++pos;
	string rez_str;
	yylloc.last_column++;
	while( pos < prog.size() && prog[pos] != '"' && prog[pos] != '\n' )
	{
	    if( prog[pos] == '\\' && (pos+1) < prog.size() )
	    {
		switch( prog[pos+1] )
		{
		    case 'n':	rez_str += '\n';	break;
		    case 't':	rez_str += '\t';	break;
		    case 'b':	rez_str += '\b';	break;
		    case 'f':	rez_str += '\f';	break;
		    case 'r':	rez_str += '\r';	break;
		    default:	rez_str += prog[pos+1];
		}
		pos++;
	    }
	    else rez_str += prog[pos];
	    pos++; yylloc.last_column++;
	}
	if( pos >= prog.size() )
	{
	    yyerror(_("Unexpected end programm, expect end string symbol '\"', "));
	    return ERR;
	}
	else if( prog[pos] == '\n' )
	{
	    yyerror(_("The next line symbol failed into string, "));
	    return ERR;
	}
	yylloc.last_column++;

	yylval.reg = p_fnc->regTmpNew();
	*yylval.reg = rez_str;
	//*yylval.reg = prog.substr(st_pos,pos-st_pos);
	pos++;
	return CONST;
    }
    //Symbols
    if( c == '_' || isalpha(c) || c > 0x7F )
    {
	bool is_dot = false;
	st_pos = pos;
	while( pos < prog.size() && ((c = prog[pos]) == '_' || c == '.' || isalnum(c) || c > 0x7F) )
	{
	    if( c == '.' ) is_dot = true;
	    pos++;
	    yylloc.last_column++;
	}
	string smb_nm = prog.substr(st_pos,pos-st_pos);
	//Keywords
	if( smb_nm == "if" )		return IF;
	if( smb_nm == "else" )		return ELSE;
	if( smb_nm == "while" )		return WHILE;
	if( smb_nm == "for" )		return FOR;
	if( smb_nm == "break" )		return BREAK;
	if( smb_nm == "continue" )	return CONTINUE;
	if( smb_nm == "return" )	return RETURN;
	if( smb_nm == "new" )		return NEW;
	if( smb_nm == "Array" )		return ARRAY;
	if( smb_nm == "Object" )	return OBJECT;
	if( smb_nm == "using" )
	{
	    char buf[255]; buf[0] = 0;
	    while( pos < prog.size() && prog[pos] != ';' ) pos++;
	    if( pos < prog.size() )
		sscanf(prog.substr(st_pos,pos-st_pos).c_str(),"using %254s",buf);
	    if( pos >= prog.size() || buf[0] == 0 )
	    {
		yyerror(_("Using namespace is error or empty, "));
		return ERR;
	    }
	    string fVal;
	    for( int off = 0; !(fVal=TSYS::strSepParse(p_fnc->mUsings,0,';',&off)).empty(); )
		if( fVal == buf ) break;
	    if( fVal.empty() )	p_fnc->mUsings = p_fnc->mUsings+buf+";";
	    pos++;
	    goto retry;
	}
	//Boolean
	if( smb_nm == "true" || smb_nm == "false" )
	{
	    yylval.reg = p_fnc->regTmpNew();
	    *yylval.reg = (smb_nm == "true")?true:false;
	    return CONST;
	}
	//Constants
	NConst *cnst_v;
	if( (cnst_v = mod->constGet(smb_nm.c_str())) != NULL )
	{
	    yylval.reg = p_fnc->regTmpNew();
	    switch(cnst_v->tp)
	    {
		case TFld::Real:	*yylval.reg = *(double*)(cnst_v->val.c_str());	break;
		case TFld::Integer:	*yylval.reg = *(int*)(cnst_v->val.c_str());	break;
		case TFld::Boolean:	*yylval.reg = *(char*)(cnst_v->val.c_str());	break;
		case TFld::String:	*yylval.reg = cnst_v->val;			break;
	    }
	    return CONST;
	}

	//Find buildin function
	if( c == '(' && mod->bFuncGet( smb_nm.c_str() ) != NULL )
	{
	    yylval.id = mod->bFuncGet(smb_nm.c_str())->code;
	    switch( mod->bFuncGet(smb_nm.c_str())->prm )
	    {
		case 0: return B_FUNC;
		case 1: return B_FUNC1;
		case 2: return B_FUNC2;
		default:
		    yyerror(_("Build in function has too much parameters, "));
		    return ERR;
	    }
	}

	//> Find external or object's functions
	if( c == '(' )
	{
	    //>> External functions
	    if( p_fnc->funcGet(smb_nm) >= 0 )
	    {
		yylval.id = p_fnc->funcGet(smb_nm);
		return FUNC;
	    }

	    //>> Check for object's functions and system object's function
	    string sel = TSYS::strSepParse(smb_nm,0,'.');
	    if( (yylval.reg=p_fnc->regAt(p_fnc->regGet(sel))) || (yylval.reg=p_fnc->regAt(p_fnc->ioGet(sel))) )
	    {
		pos -= (smb_nm.size()-sel.size());
		yylloc.last_column -= (smb_nm.size()-sel.size());
		return VAR;
	    }

	    yyerror(_("Function error, "));
	    return ERR;
	}

	//> Check allow registers
	if( p_fnc->regGet(smb_nm) >= 0 )
	{
	    yylval.reg = p_fnc->regAt(p_fnc->regGet(smb_nm));
	    return VAR;
	}

	//> Global atributes and object's parameters.
	if( is_dot )
	{
	    //>> Check to parameter atribute (TValue)
	    try
	    {
		AutoHD<TVal> vl = SYS->daq().at().at(TSYS::strSepParse(smb_nm,0,'.')).at().
						     at(TSYS::strSepParse(smb_nm,1,'.')).at().
						     at(TSYS::strSepParse(smb_nm,2,'.')).at().
						     vlAt(TSYS::strSepParse(smb_nm,3,'.'));
		yylval.reg = p_fnc->regAt(p_fnc->regNew(true));
		yylval.reg->setName(smb_nm);
		yylval.reg->setPAttr(vl);
		yylval.reg->setLock(true);
		return VAR;
	    }catch(...){ }

	    //>> Check for object's parameters
	    string sel = TSYS::strSepParse(smb_nm,0,'.');
	    if( (yylval.reg=p_fnc->regAt(p_fnc->regGet(sel))) || (yylval.reg=p_fnc->regAt(p_fnc->ioGet(sel))) )
	    {
		pos -= (smb_nm.size()-sel.size());
		yylloc.last_column -= (smb_nm.size()-sel.size());
		return VAR;
	    }

	    yyerror(_("Symbol error, "));
	    return ERR;
	}
	//Check IO
	if( yylval.reg=p_fnc->regAt(p_fnc->ioGet(smb_nm)) )	return VAR;

	//Keywords
	if( smb_nm == "in" )		return IN;
	if( smb_nm == "var" )		return VAR_DIR;

	//Get new register
	yylval.reg = p_fnc->regAt(p_fnc->regNew(true));
	yylval.reg->setName(smb_nm);
	yylval.reg->setLock(true);
	return VAR;
    }
    //Object's properties or functions
    else if( c == '.' && (pos+1) < prog.size() )
    {
	st_pos = ++pos;
	yylloc.last_column++;
	while( pos < prog.size() && ((c = prog[pos]) == '_' || isalpha(c) || (pos>st_pos && isdigit(c)) || c > 0x7F) )
	{ pos++; yylloc.last_column++; }
	if( (pos-st_pos) > 255 ) { yyerror(_("Object's properties too long, ")); return ERR; }
	strncpy(yylval.op,prog.substr(st_pos,pos-st_pos).data(),20);
	// p_fnc->o_prpf.push_back(prog.substr(st_pos,pos-st_pos));
	return O_PRP_F;
    }
    //Multi symbol operations
    else if( prog.substr(pos,2) == "++" ) { pos+=2; yylloc.last_column+=2; return INCREM; }
    else if( prog.substr(pos,2) == "--" ) { pos+=2; yylloc.last_column+=2; return DECREM; }
    else if( prog.substr(pos,2) == "||" ) { pos+=2; yylloc.last_column+=2; return OR; }
    else if( prog.substr(pos,2) == "&&" ) { pos+=2; yylloc.last_column+=2; return AND; }
    else if( prog.substr(pos,2) == ">=" ) { pos+=2; yylloc.last_column+=2; return GE; }
    else if( prog.substr(pos,2) == "<=" ) { pos+=2; yylloc.last_column+=2; return LE; }
    else if( prog.substr(pos,2) == "==" ) { pos+=2; yylloc.last_column+=2; return EQ; }
    else if( prog.substr(pos,2) == "!=" ) { pos+=2; yylloc.last_column+=2; return NE; }
    else if( prog.substr(pos,2) == "<<" ) { pos+=2; yylloc.last_column+=2; return BITSHLEFT; }
    else if( prog.substr(pos,2) == ">>" ) { pos+=2; yylloc.last_column+=2; return BITSHRIGHT; }
    else if( prog.substr(pos,2) == "+=" ) { pos+=2; yylloc.last_column+=2; return ADDEQ; }
    else if( prog.substr(pos,2) == "-=" ) { pos+=2; yylloc.last_column+=2; return SUBEQ; }
    else if( prog.substr(pos,2) == "*=" ) { pos+=2; yylloc.last_column+=2; return MULEQ; }
    else if( prog.substr(pos,2) == "/=" ) { pos+=2; yylloc.last_column+=2; return DIVEQ; }
    else { pos++; yylloc.last_column++; }

    return c;
}

}
