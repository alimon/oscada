
%{
/***************************************************************************
 *   Copyright (C) 2005 by Roman Savochenko                                *
 *   rom_as@fromru.com                                                     *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/		  

#include <tsys.h>
#include <tmess.h>
#include "freefunc.h"
#include "freelib.h"
#include "virtual.h"

#define YYERROR_VERBOSE true

namespace JavaLikeCalc
{
char m_buf[STR_BUF_LEN];
struct YYLTYPE;

int yylex( );
void yyerror( const char *s );
void sfErr( const string &mess, YYLTYPE *ps);

%}

/************************* GRAMMAR ****************************/
%union
{   
    int id;	//Function id
    Reg	*reg; 	//Variable and Constant registers list index and function list index
    int fp_cnt;	//Function parameters counter
    int prg_cd;	//Programm code
}

%token ERR IF ELSE ADDEQ SUBEQ MULEQ DIVEQ
%token <id>	FUNC B_FUNC B_FUNC1 B_FUNC2
%token <reg>	VAR CONST
%type  <reg>    expr
%type  <prg_cd>	if if_expr end
%type  <fp_cnt>	prmlst

%right '=' ADDEQ SUBEQ MULEQ DIVEQ
%right '?' ':'
%left OR
%left AND
%left '|' '&' '^'
%left '>' '<' GE LE EQ NE
%left '+' '-'
%left '*' '/' '%'
%right UN_MINUS '!' '~'

%%
root:	solver end
	| error	{ sfErr("",&yylloc); YYABORT; }
solver:	/*empty*/
	| solver solve	
solve:  assign ';'
	| IF '(' expr ')' if solve end 
	    { try{ p_fnc->cdCond($3,$5,$7,$7); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| IF '(' expr ')' if solve end ELSE solve end  
	    { try{ p_fnc->cdCond($3,$5,$7,$10); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| FUNC '(' prmlst ')' ';'   
	    { try{ p_fnc->cdExtFnc($1,$3,true); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| '{' solver '}'
assign: VAR '=' expr 					
	    {   
    		try
		{
		    if( $1->type() == Reg::Free ) $1->type($3->vType(p_fnc));
		    p_fnc->cdAssign($1,$3);
		} catch(TError err){ sfErr(err.mess,&@1); YYABORT; }
	    }    
	| VAR ADDEQ expr 
	    {
		try
		{
		    if( $1->type() == Reg::Free ) throw TError(p_fnc->nodePath().c_str(),mod->I18N("Variable <%s> is used but undefined"),$1->name().c_str());
		    p_fnc->cdAssign($1,p_fnc->cdBinaryOp(Reg::AddI,$1,$3));	    
		} catch(TError err){ sfErr(err.mess,&@1); YYABORT; }
	    }
	| VAR SUBEQ expr 
	    {    
		try
		{
		    if( $1->type() == Reg::Free ) throw TError(p_fnc->nodePath().c_str(),mod->I18N("Variable <%s> is used but undefined"),$1->name().c_str());
		    p_fnc->cdAssign($1,p_fnc->cdBinaryOp(Reg::SubI,$1,$3));
		} catch(TError err){ sfErr(err.mess,&@1); YYABORT; }
	    }
	| VAR MULEQ expr 
	    {    
		try
		{
		    if( $1->type() == Reg::Free ) throw TError(p_fnc->nodePath().c_str(),mod->I18N("Variable <%s> is used but undefined"),$1->name().c_str()); 
		    p_fnc->cdAssign($1,p_fnc->cdBinaryOp(Reg::MulI,$1,$3));	    
		} catch(TError err){ sfErr(err.mess,&@1); YYABORT; }
	    }
	| VAR DIVEQ expr 
	    {    
		try
		{
		    if( $1->type() == Reg::Free ) throw TError(p_fnc->nodePath().c_str(),mod->I18N("Variable <%s> is used but undefined"),$1->name().c_str());
		    p_fnc->cdAssign($1,p_fnc->cdBinaryOp(Reg::DivI,$1,$3));
		} catch(TError err){ sfErr(err.mess,&@1); YYABORT; }
	    }
expr:	CONST	{ $$ = $1; } 
	| VAR	
	    {  
		try
		{
		    if( $1->type() == Reg::Free ) throw TError(p_fnc->nodePath().c_str(),mod->I18N("Variable <%s> is used but undefined"),$1->name().c_str());
		    $$ = $1;
		} catch(TError err){ sfErr(err.mess,&@1); YYABORT; }
	    }
	| VAR '=' expr		
	    {
		try
		{
		    if( $1->type() == Reg::Free ) $1->type($3->vType(p_fnc));
		    p_fnc->cdAssign($1,$3);
		    $$ = $1;
		} catch(TError err){ sfErr(err.mess,&@1); YYABORT; }
	    }
	| B_FUNC '(' ')'		{ try{ $$ = p_fnc->cdBldFnc($1); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| B_FUNC1 '(' expr ')'		{ try{ $$ = p_fnc->cdBldFnc($1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| B_FUNC2 '(' expr ',' expr ')'	{ try{ $$ = p_fnc->cdBldFnc($1,$3,$5); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| FUNC '(' prmlst ')' 		{ try{ $$ = p_fnc->cdExtFnc($1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr '+' expr	{ try{ $$ = p_fnc->cdBinaryOp(Reg::AddI,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr '-' expr	{ try{ $$ = p_fnc->cdBinaryOp(Reg::SubI,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }	
	| expr '*' expr	{ try{ $$ = p_fnc->cdBinaryOp(Reg::MulI,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr '/' expr { try{ $$ = p_fnc->cdBinaryOp(Reg::DivI,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr '%' expr { try{ $$ = p_fnc->cdBinaryOp(Reg::RstI,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr '|' expr { try{ $$ = p_fnc->cdBinaryOp(Reg::BitOr,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr '&' expr { try{ $$ = p_fnc->cdBinaryOp(Reg::BitAnd,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr '^' expr { try{ $$ = p_fnc->cdBinaryOp(Reg::BitXor,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| '(' expr ')'	{ $$ = $2; }
	| expr OR expr	{ try{ $$ = p_fnc->cdBinaryOp(Reg::LOr,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr AND expr	{ try{ $$ = p_fnc->cdBinaryOp(Reg::LAnd,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr '<' expr { try{ $$ = p_fnc->cdBinaryOp(Reg::LTI,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr '>' expr { try{ $$ = p_fnc->cdBinaryOp(Reg::GTI,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr GE expr 	{ try{ $$ = p_fnc->cdBinaryOp(Reg::GEI,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr LE expr 	{ try{ $$ = p_fnc->cdBinaryOp(Reg::LEI,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr EQ expr 	{ try{ $$ = p_fnc->cdBinaryOp(Reg::EQI,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr NE expr 	{ try{ $$ = p_fnc->cdBinaryOp(Reg::NEI,$1,$3); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| '!' expr	{ try{ $$ = p_fnc->cdUnaryOp(Reg::Not,$2); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| '~' expr	{ try{ $$ = p_fnc->cdUnaryOp(Reg::BitNot,$2); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| '-' expr %prec UN_MINUS { try{ $$ = p_fnc->cdUnaryOp(Reg::NegI,$2); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
	| expr if_expr expr end ':' expr end	
	    { try{ $$ = p_fnc->cdCond($1,$2,$4,$7,$3,$6); } catch(TError err){ sfErr(err.mess,&@1); YYABORT; } }
prmlst: /*empty*/		{ $$ = 0; }
	| expr			{ $$ = 1; p_fnc->f_prmst.push_front($1); }
	| prmlst ',' prmlst	{ $$ = $1 + $3; }    	
if:	/*empty*/	{ $$ = p_fnc->prg.size(); p_fnc->prg=p_fnc->prg+(char)Reg::If+"R00nn"; }
if_expr: '?'		{ $$ = p_fnc->prg.size(); p_fnc->prg=p_fnc->prg+(char)Reg::If+"R00nn"; }
end:	/*empty*/	{ p_fnc->prg+=(char)Reg::End; $$ = p_fnc->prg.size(); }
/************************* END OF GRAMMAR ****************************/
%%	

void sfErr(const string &mess, YYLTYPE *ps)
{
    snprintf(m_buf,sizeof(m_buf),mod->I18N("%s, pos: (%d,%d)-(%d,%d).\n"),
	mess.c_str(),ps->first_line,ps->first_column,ps->last_line,ps->last_column );
    yyerror(m_buf);
}

void yyerror( const char *s )
{
    p_fnc->p_err+=s;
}

int yylex( )
{
    unsigned int c, st_pos;
    int &pos = p_fnc->la_pos;
    string &prog = p_fnc->prg_src;
    
    if( pos == 0 ) { yylloc.last_line = yylloc.last_column = 1; }
    
    while( pos < prog.size() && 
	((c = prog[pos]) == ' ' || c == '\n' || c == '\t' || 
	c == '\f' || c == '\r' || c == '\v') )
    { 	    
        if( c == '\n' )
	{
	    yylloc.last_column = 1;
	    yylloc.last_line++;
	}
	else yylloc.last_column++;
	pos++;
    }
    //Comentars
    while( prog.substr(pos,2) == "//" )
    {
	while( pos < prog.size() && prog[pos] != '\n' ) pos++;
	while( pos < prog.size() &&
    	    ((c = prog[pos]) == ' ' || c == '\n' || c == '\t' ||
    	    c == '\f' || c == '\r' || c == '\v') ) 
	{
	    if( c == '\n' )
    	    {
	        yylloc.last_column = 1;
		yylloc.last_line++;
	    }
    	    else yylloc.last_column++;		
	    pos++;    
	}
    }
    
    yylloc.first_line = yylloc.last_line;
    yylloc.first_column = yylloc.last_column;	
    
    //End string	
    if( pos >= prog.size() ) return 0;
    //Number
    if( isdigit(c) || (c == '.' && (pos+1) < prog.size() && isdigit(prog[pos+1])) )
    {	
	st_pos = pos;
     	int tp = 0;	//Type constant (0-detect;1-dec;2-oct;3-hex;4-real)
	if( c == '.' )	tp = 4;
	else
	{
	    while( pos < prog.size() && isdigit(c=prog[pos]) )
	    { pos++; yylloc.last_column++; }
	    if( pos >= prog.size() )			tp = (prog[st_pos]=='0')?2:1;
	    else if( c == 'x' || c == 'X' )		tp = 3;
	    else if( c == '.' || c == 'e' || c == 'E' )	tp = 4;
	    else tp = (prog[st_pos]=='0')?2:1;
	}
	if( tp == 1 )
	{
	    yylval.reg = p_fnc->regTmpNew();
	    *yylval.reg = (int)strtol(prog.substr(st_pos,pos-st_pos).c_str(),NULL,10);
            return CONST;
	}
	else if( tp == 2 )
	{
	    yylloc.last_column-=pos-st_pos;
	    pos = st_pos;
	    while( pos < prog.size() && (c=prog[pos]) >= '0' && c <= '7' )
            { pos++; yylloc.last_column++; }
	    
	    yylval.reg = p_fnc->regTmpNew();
	    *yylval.reg = (int)strtol(prog.substr(st_pos,pos-st_pos).c_str(),NULL,8);
            return CONST;
	}
	else if( tp == 3 )
	{
	    pos++; yylloc.last_column++;
	    while( pos < prog.size() && (isdigit(c=prog[pos]) || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F') ) )
            { pos++; yylloc.last_column++; }
	    
	    yylval.reg = p_fnc->regTmpNew();
	    *yylval.reg = (int)strtol(prog.substr(st_pos,pos-st_pos).c_str(),NULL,16);
	    return CONST;
	}
	else if( tp == 4 )
	{
	    bool e_ok = (c=='e'||c=='E')?true:false;
	    pos++; yylloc.last_column++;
	    while( pos < prog.size() && (isdigit(c=prog[pos]) || c == 'E' || c == 'e' || 
		((c == '+' || c == '-') && ((prog[pos-1]) == 'e' || (prog[pos-1]) == 'E'))) )
	    {
	    	if( c=='E' || c=='e' )
		{
		    if( e_ok )	break;
		    else e_ok = true;
	     	}
	       	pos++; yylloc.last_column++;
	    }
	    	    
	    yylval.reg = p_fnc->regTmpNew();
	    *yylval.reg = atof(prog.substr(st_pos,pos-st_pos).c_str());
            return CONST;
	}
	else return 0;
    }
    //String
    if( c == '"' && (pos+1) < prog.size() )
    {
	st_pos = ++pos;
	while( pos < prog.size() && prog[pos] != '"' && prog[pos] != '\n' )
        { pos++; yylloc.last_column++; }
	if( pos >= prog.size() )
	{
	    yyerror(mod->I18N("Unexpected end programm, expect end string symbol '\"', "));
	    return ERR;	
	}
	else if( prog[pos] == '\n' )
	{
	    yyerror(mod->I18N("The next line symbol failed into string, "));
	    return ERR;	
	}
	
	yylval.reg = p_fnc->regTmpNew();
	*yylval.reg = prog.substr(st_pos,pos-st_pos);
	pos++;
	return CONST;
    }
    //Symbols
    if( c == '_' || isalpha(c) || c > 0x7F )
    {
	st_pos = pos;
        while( pos < prog.size() && ((c = prog[pos]) == '_' || c == '.' || isalnum(c) || c > 0x7F) )
	{ pos++; yylloc.last_column++; }
	string smb_nm = prog.substr(st_pos,pos-st_pos);		
	//Keywords
	if( smb_nm == "if" )	return IF;
	if( smb_nm == "else" ) 	return ELSE;	
	//Boolean
	if( smb_nm == "true" || smb_nm == "false" )
	{
	    yylval.reg = p_fnc->regTmpNew();
	    *yylval.reg = (smb_nm == "true")?true:false;
	    return CONST;
	}
	//Constants	
	if( mod->constGet(smb_nm.c_str()) != NULL )
	{
	    yylval.reg = p_fnc->regTmpNew();
	    *yylval.reg = mod->constGet(smb_nm.c_str())->val;
            return CONST;
	}
	//Find function
	//Find buildin function
	if( mod->bFuncGet( smb_nm.c_str() ) != NULL )
	{
	    yylval.id = mod->bFuncGet(smb_nm.c_str())->code;
	    switch( mod->bFuncGet(smb_nm.c_str())->prm )
	    {
		case 0: return B_FUNC;
		case 1: return B_FUNC1;
		case 2: return B_FUNC2;
		default:
		    yyerror(mod->I18N("Build in function have to mach parameters, "));
            	    return ERR;
	    }	
	}
	//Find external functions
        if( p_fnc->funcGet( smb_nm ) >= 0 )
	{
    	    yylval.id = p_fnc->funcGet( smb_nm );
	    return FUNC;
    	}
	//Check allow registers
	if( p_fnc->regGet(smb_nm.c_str()) >= 0 )
	{
	    yylval.reg = p_fnc->regAt(p_fnc->regGet(smb_nm.c_str()));
	    return VAR;
	}
	//Check IO
        int i_io;
	for( i_io = 0; i_io < p_fnc->ioSize(); i_io++ )
	    if( p_fnc->io(i_io)->id() == smb_nm )
            {
		yylval.reg = p_fnc->regAt(p_fnc->regNew(true));
		yylval.reg->name(smb_nm.c_str());
		yylval.reg->setVar(i_io);
		yylval.reg->lock(true);
	        return VAR;
	    }
	//Get new register    
	if( i_io >= p_fnc->ioSize() )
	{
	    yylval.reg = p_fnc->regAt(p_fnc->regNew(true));
	    yylval.reg->name(smb_nm.c_str());
	    yylval.reg->lock(true);
	    return VAR;		
	}		
    }    
    //Multi symbol operations
    else if( prog.substr(pos,2) == "||" ) { pos+=2; yylloc.last_column+=2; return OR; }
    else if( prog.substr(pos,2) == "&&" ) { pos+=2; yylloc.last_column+=2; return AND; }    
    else if( prog.substr(pos,2) == ">=" ) { pos+=2; yylloc.last_column+=2; return GE; }    
    else if( prog.substr(pos,2) == "<=" ) { pos+=2; yylloc.last_column+=2; return LE; }    
    else if( prog.substr(pos,2) == "==" ) { pos+=2; yylloc.last_column+=2; return EQ; }
    else if( prog.substr(pos,2) == "!=" ) { pos+=2; yylloc.last_column+=2; return NE; }
    else if( prog.substr(pos,2) == "+=" ) { pos+=2; yylloc.last_column+=2; return ADDEQ; }
    else if( prog.substr(pos,2) == "-=" ) { pos+=2; yylloc.last_column+=2; return SUBEQ; }
    else if( prog.substr(pos,2) == "*=" ) { pos+=2; yylloc.last_column+=2; return MULEQ; }
    else if( prog.substr(pos,2) == "/=" ) { pos+=2; yylloc.last_column+=2; return DIVEQ; }
    else { pos++; yylloc.last_column++; }
    
    return c;
}

}
