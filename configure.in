
AC_PREREQ([2.50])

AC_INIT([OpenSCADA],[0.7.2],[rom_as@oscada.org, rom_as@fromru.com])
AC_PREFIX_DEFAULT([/usr])
oscd_LIBREVISION="1:0:0"
oscd_modulpref="oscd_"
oscd_docmodul="../../../../doc/Modules/"

AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE(AC_PACKAGE_TARNAME, AC_PACKAGE_VERSION)
AM_CONFIG_HEADER(config.h)

AC_LANG(C++)

# Perform program name transformation
#AC_ARG_PROGRAM

# Enable options
AC_ENABLE_SHARED(yes)
AC_ENABLE_STATIC(yes)
AC_LIBTOOL_DLOPEN

# AM_GNU_GETTEXT

# Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_LIBTOOL

if test "$ac_cv_prog_cc_g" = "no" -o "$ac_cv_prog_cxx_g" = "no"; then
    AC_MSG_ERROR([No C or C++ compiler present. Install GCC and G++.]);
fi

AM_SANITY_CHECK

# Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([time.h signal.h semaphore.h fcntl.h math.h errno.h syslog.h unistd.h dirent.h stdio.h stdarg.h stdlib.h getopt.h dlfcn.h locale.h langinfo.h sys/types.h sys/stat.h sys/time.h sys/utsname.h pthread.h],[],
    [AC_MSG_ERROR(Some GLibC headers not found. Install or check GLibC developing package!)])
AC_CHECK_HEADERS([string vector map exception typeinfo deque],[],
    [AC_MSG_ERROR([Some standard template libs' STL headers not found. Install or check STL-StdC++ developing package!])])
AC_CHECK_HEADERS([iconv.h],[ ],[AC_MSG_NOTICE(iconv.h header not found. Using is disabled!)])
AC_CHECK_HEADERS([libintl.h],[ ],[AC_MSG_NOTICE(libintl.h header not found. Using is disabled!)])
AM_CONDITIONAL([LibIntl], [test $ac_cv_header_libintl_h = yes])

#Gettext utilites check
if test $ac_cv_header_libintl_h = yes; then
    AC_CHECK_PROG(XGETTEXT, xgettext, xgettext, false)
    AC_CHECK_PROG(MSGMERGE, msgmerge, msgmerge, false)
    AC_CHECK_PROG(MSGFMT, msgfmt, msgfmt, false)
    if test $XGETTEXT = false -o $MSGMERGE = false -o $MSGFMT = false; then
	AC_MSG_ERROR([Some gettext I18N utilite no present! Install gettext utilites package.]);
    fi
fi

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

# Set up system library
AC_SUBST(sys_lib)
sys_lib="/usr/lib"
if test $target_cpu = "x86_64"; then sys_lib="/usr/lib64"; fi

AC_SUBST(LIB_CORE)

QT4use=false;
FFTWuse=false;
GDuse=false;
SensorsUse=false;

ix86=false;
if test $target_cpu = "i386" -o $target_cpu = "i486" -o $target_cpu = "i586" -o $target_cpu = "i686" -o \
    $target_cpu = "k6" -o $target_cpu = "athlon" -o $target_cpu = "pentium2" -o $target_cpu = "pentium3" -o \
    $target_cpu = "pentium4"; then ix86=true; fi

# Checks for library functions.
AC_FUNC_CLOSEDIR_VOID
AC_FUNC_MKTIME
AC_FUNC_SELECT_ARGTYPES
AC_TYPE_SIGNAL
AC_FUNC_STAT
#AC_CHECK_FUNCS([getcwd gethostbyname inet_ntoa memmove memset mkdir nl_langinfo pow select setenv setlocale socket strdup strerror strtol uname])
AC_ISC_POSIX

oscd_moduldir="\${libdir}/${PACKAGE}"
oscd_localedir="\${DESTDIR}\${datadir}/locale"
AC_SUBST(oscd_LIBREVISION)
AC_SUBST(oscd_moduldir)
AC_SUBST(oscd_localedir)
AC_SUBST(oscd_modulpref)
AC_SUBST(oscd_docmodul)
AC_SUBST(subdir_mod)

AC_CONFIG_FILES(Makefile src/Makefile src_call/Makefile src/moduls/Makefile
	src/moduls/arhiv/Makefile src/moduls/bd/Makefile src/moduls/protocol/Makefile
	src/moduls/special/Makefile src/moduls/daq/Makefile src/moduls/transport/Makefile
	src/moduls/ui/Makefile)

#====== Generic functions enable/disable ======
AC_ARG_ENABLE(ForDist,AC_HELP_STRING([--enable-ForDist], [prepare for distributive build by "make dist", by all modules enable.]),[ ],[ enable_ForDist=no; ])
AC_ARG_ENABLE(CrossCompile,AC_HELP_STRING([--enable-CrossCompile], [enable crosscompile build]),[ ],
[ if test $host = $build; then enable_CrossCompile=no; else enable_CrossCompile=yes; fi])
AC_ARG_ENABLE(CoreLibStatic,AC_HELP_STRING([--enable-CoreLibStatic], [enable OpenSCADA core lib no shared, only static.]),
[ liboscada_la_LIBTOOLFLAGS="--tag=disable-shared"; AC_SUBST(liboscada_la_LIBTOOLFLAGS) ],[ ])
AC_ARG_ENABLE(LibGD,AC_HELP_STRING([--disable-LibGD], [disable using library LibGD in core]),[ ],[ enable_LibGD=yes; ])

#====== Check build modules ======
#> DB modules
AC_ARG_ENABLE(DBF,AC_HELP_STRING([--disable-DBF], [disable build module DB.DBF]),
[ if test $enableval = yes; then ModDBF=true; else ModDBF=false; fi],[ ModDBF=true; ])
AC_ARG_ENABLE(MySQL,AC_HELP_STRING([--disable-MySQL], [disable build module DB.MySQL]),
[ if test $enableval = yes; then ModMySQL=true; else ModMySQL=false; fi],[ ModMySQL=true; ])
AC_ARG_ENABLE(SQLite,AC_HELP_STRING([--disable-SQLite], [enable/disable/enable=incl build module DB.SQLite]),[ ],[ enable_SQLite=yes; ])
AC_ARG_ENABLE(FireBird,AC_HELP_STRING([--disable-FireBird], [disable build module DB.FireBird]),
[ if test $enableval = yes; then ModFireBird=true; else ModFireBird=false; fi],[ ModFireBird=true; ])
AC_ARG_ENABLE(PostgreSQL,AC_HELP_STRING([--disable-PostgreSQL], [disable build module DB.PostgreSQL]),
[ if test $enableval = yes; then ModPostgreSQL=true; else ModPostgreSQL=false; fi],[ ModPostgreSQL=true; ])
#> DAQ modules
AC_ARG_ENABLE(System,AC_HELP_STRING([--disable-System], [disable build module DAQ.System]),
[ if test $enableval = yes; then ModSystem=true; else ModSystem=false; fi],[ ModSystem=true; ])
AC_ARG_ENABLE(BlockCalc,AC_HELP_STRING([--disable-BlockCalc], [disable build module DAQ.BlockCalc]),
[ if test $enableval = yes; then ModBlockCalc=true; else ModBlockCalc=false; fi],[ ModBlockCalc=true; ])
AC_ARG_ENABLE(JavaLikeCalc,AC_HELP_STRING([--disable-JavaLikeCalc], [disable build module DAQ.JavaLikeCalc]),
[ if test $enableval = yes; then ModJavaLikeCalc=true; else ModJavaLikeCalc=false; fi],[ ModJavaLikeCalc=true; ])
AC_ARG_ENABLE(DiamondBoards,AC_HELP_STRING([--disable-DiamondBoards], [disable build module DAQ.DiamondBoards]),
[ if test $enableval = yes; then ModDiamondBoards=true; else ModDiamondBoards=false; fi],[ ModDiamondBoards=true; ])
AC_ARG_ENABLE(LogicLev,AC_HELP_STRING([--disable-LogicLev], [disable build module DAQ.LogicLev]),
[ if test $enableval = yes; then ModLogicLev=true; else ModLogicLev=false; fi],[ ModLogicLev=true; ])
AC_ARG_ENABLE(SNMP,AC_HELP_STRING([--disable-SNMP], [disable build module DAQ.SNMP]),
[ if test $enableval = yes; then ModSNMP=true; else ModSNMP=false; fi],[ ModSNMP=true; ])
AC_ARG_ENABLE(Siemens,AC_HELP_STRING([--disable-Siemens], [disable build module DAQ.Siemens]),
[ if test $enableval = yes; then ModSiemens=true; else ModSiemens=false; fi],[ ModSiemens=true; ])
AC_ARG_ENABLE(ModBus,AC_HELP_STRING([--disable-ModBus], [enable/disable/enable=incl build module DAQ.ModBus]),[ ],[ enable_ModBus=yes; ])
AC_ARG_ENABLE(DCON,AC_HELP_STRING([--disable-DCON], [disable build module DAQ.DCON]),
[ if test $enableval = yes; then ModDCON=true; else ModDCON=false; fi],[ ModDCON=true; ])
AC_ARG_ENABLE(DAQGate,AC_HELP_STRING([--disable-DAQGate], [disable build module DAQ.DAQGate]),
[ if test $enableval = yes; then ModDAQGate=true; else ModDAQGate=false; fi],[ ModDAQGate=true; ])
AC_ARG_ENABLE(SoundCard,AC_HELP_STRING([--disable-SoundCard], [disable build module DAQ.SoundCard]),
[ if test $enableval = yes; then ModSoundCard=true; else ModSoundCard=false; fi],[ ModSoundCard=true; ])
AC_ARG_ENABLE(ICP_DAS,AC_HELP_STRING([--enable-ICP_DAS], [enable build module DAQ.ICP_DAS]),
[ if test $enableval = yes; then ModICP_DAS=true; else ModICP_DAS=false; fi],[ ModICP_DAS=false; ])
AC_ARG_ENABLE(OPC_UA,AC_HELP_STRING([--disable-OPC_UA], [disable build module DAQ.OPC_UA]),
[ if test $enableval = yes; then ModOPC_UA=true; else ModOPC_UA=false; fi],[ ModOPC_UA=true; ])
AC_ARG_ENABLE(AMRDevs,AC_HELP_STRING([--enable-AMRDevs], [enable build module DAQ.AMRDevs]),
[ if test $enableval = yes; then ModAMRDevs=true; else ModAMRDevs=false; fi],[ ModAMRDevs=false; ])
AC_ARG_ENABLE(BFN,AC_HELP_STRING([--disable-BFN], [disable build module DAQ.BFN]),
[ if test $enableval = yes; then ModBFN=true; else ModBFN=false; fi],[ ModBFN=true; ])
#> Archive modules
AC_ARG_ENABLE(FSArch,AC_HELP_STRING([--disable-FSArch], [disable build module Archive.FSArch]),
[ if test $enableval = yes; then ModFSArch=true; else ModFSArch=false; fi],[ ModFSArch=true; ])
AC_ARG_ENABLE(DBArch,AC_HELP_STRING([--disable-DBArch], [disable build module Archive.DBArch]),
[ if test $enableval = yes; then ModDBArch=true; else ModDBArch=false; fi],[ ModDBArch=true; ])
#> Transport modules
AC_ARG_ENABLE(Sockets,AC_HELP_STRING([--disable-Sockets], [disable build module Transport.Sockets]),
[ if test $enableval = yes; then ModSockets=true; else ModSockets=false; fi],[ ModSockets=true; ])
AC_ARG_ENABLE(SSL,AC_HELP_STRING([--disable-SSL], [disable build module Transport.SSL]),
[ if test $enableval = yes; then ModSSL=true; else ModSSL=false; fi],[ ModSSL=true; ])
AC_ARG_ENABLE(Serial,AC_HELP_STRING([--disable-Serial], [disable build module Transport.Serial]),
[ if test $enableval = yes; then ModSerial=true; else ModSerial=false; fi],[ ModSerial=true; ])
#> Transport protocol modules
AC_ARG_ENABLE(HTTP,AC_HELP_STRING([--disable-HTTP], [disable build module Protocol.HTTP]),
[ if test $enableval = yes; then ModHTTP=true; else ModHTTP=false; fi],[ ModHTTP=true; ])
AC_ARG_ENABLE(SelfSystem,AC_HELP_STRING([--disable-SelfSystem], [disable build module Protocol.SelfSystem]),
[ if test $enableval = yes; then ModSelfSystem=true; else ModSelfSystem=false; fi],[ ModSelfSystem=true; ])
AC_ARG_ENABLE(UserProtocol,AC_HELP_STRING([--disable-UserProtocol], [disable build module Protocol.UserProtocol]),
[ if test $enableval = yes; then ModUserProtocol=true; else ModUserProtocol=false; fi],[ ModUserProtocol=true; ])
#> UI modules
AC_ARG_ENABLE(VCAEngine,AC_HELP_STRING([--disable-VCAEngine], [disable build module UI.VCAEngine]),
[ if test $enableval = yes; then ModVCAEngine=true; else ModVCAEngine=false; fi],[ ModVCAEngine=true; ])
AC_ARG_ENABLE(Vision,AC_HELP_STRING([--disable-Vision], [disable build module UI.Vision]),
[ if test $enableval = yes; then ModVision=true; else ModVision=false; fi],[ ModVision=true; ])
AC_ARG_ENABLE(QTStarter,AC_HELP_STRING([--disable-QTStarter], [disable build module UI.QTStarter]),
[ if test $enableval = yes; then ModQTStarter=true; else ModQTStarter=false; fi],[ ModQTStarter=true; ])
AC_ARG_ENABLE(QTCfg,AC_HELP_STRING([--disable-QTCfg], [disable build module UI.QTCfg]),
[ if test $enableval = yes; then ModQTCfg=true; else ModQTCfg=false; fi],[ ModQTCfg=true; ])
AC_ARG_ENABLE(WebCfg,AC_HELP_STRING([--disable-WebCfg], [disable build module UI.WebCfg]),
[ if test $enableval = yes; then ModWebCfg=true; else ModWebCfg=false; fi],[ ModWebCfg=true; ])
AC_ARG_ENABLE(WebCfgD,AC_HELP_STRING([--disable-WebCfgD], [disable build module UI.WebCfgD]),
[ if test $enableval = yes; then ModWebCfgD=true; else ModWebCfgD=false; fi],[ ModWebCfgD=true; ])
AC_ARG_ENABLE(WebVision,AC_HELP_STRING([--disable-WebVision], [disable build module UI.WebVision]),
[ if test $enableval = yes; then ModWebVision=true; else ModWebVision=false; fi],[ ModWebVision=true; ])
AC_ARG_ENABLE(WebUser,AC_HELP_STRING([--disable-WebUser], [disable build module UI.WebUser]),
[ if test $enableval = yes; then ModWebUser=true; else ModWebUser=false; fi],[ ModWebUser=true; ])
#> Special modules
AC_ARG_ENABLE(SystemTests,AC_HELP_STRING([--disable-SystemTests], [disable build module Special.SystemTests]),
[ if test $enableval = yes; then ModSystemTests=true; else ModSystemTests=false; fi],[ ModSystemTests=true; ])
AC_ARG_ENABLE(FLibComplex1,AC_HELP_STRING([--disable-FLibComplex1], [disable build module Special.FLibComplex1]),
[ if test $enableval = yes; then ModFLibComplex1=true; else ModFLibComplex1=false; fi],[ ModFLibComplex1=true; ])
AC_ARG_ENABLE(FLibMath,AC_HELP_STRING([--disable-FLibMath], [disable build module Special.FLibMath]),
[ if test $enableval = yes; then ModFLibMath=true; else ModFLibMath=false; fi],[ ModFLibMath=true; ])
AC_ARG_ENABLE(FLibSYS,AC_HELP_STRING([--disable-FLibSYS], [disable build module Special.FLibSYS]),
[ if test $enableval = yes; then ModFLibSYS=true; else ModFLibSYS=false; fi],[ ModFLibSYS=true; ])

AC_MSG_RESULT(========== Core libraries check =============)
# Check for libraries
if test $enable_CrossCompile = no; then
    AC_FUNC_MALLOC
    AC_FUNC_REALLOC
fi
AC_CHECK_LIB([m],[sin],[AC_MSG_NOTICE([LibM: Pass global library using])],
    [AC_MSG_ERROR(Math library not found. Install or check GLibC core package!)])
AC_CHECK_LIB([dl],[dlopen],[AC_MSG_NOTICE([LibDl: Pass global library using])],
    [AC_MSG_ERROR(Dynamik linking library not found. Install or check GLibC core package!)])
#AC_CHECK_LIB([rt],[pthread_create],[AC_MSG_NOTICE(Pass global library using)],
#    [AC_MSG_ERROR(Pthread library not found. Install or check GLibC core package!)])
AC_CHECK_LIB([crypt],[crypt],[AC_MSG_NOTICE([LibCrypt: Pass global library using])],
    [AC_MSG_ERROR(Crypt library not found. Install or check GLibC core package!)])
AC_CHECK_LIB([z],[deflate],[AC_MSG_NOTICE([LibZ: Pass global library using])],
    [AC_MSG_ERROR(Z library not found. Install or check libz package!)])

#> Check for GD library use in OpenSCADA core
if test $enable_LibGD = yes; then
    AC_CHECK_HEADERS([gd.h],
	[
	    AC_CHECK_LIB([gd],[gdImageCreate],
	    [AC_MSG_NOTICE([LibGD: Pass global library using]); LIB_CORE="${LIB_CORE}-lgd "],
	    [AC_MSG_ERROR(GD library not found. Install or check GDlib package!)])
	],
	[AC_MSG_ERROR(GD library headers not found. Install or check GD developing package!)])
fi

#> Check for PCRE library use in OpenSCADA core
CXXFLAGS="$CXXFLAGS $(pkg-config --cflags libpcre)"
AC_CHECK_HEADERS([pcre.h],[],
    [AC_MSG_ERROR(UI.VCAEngine: PCRE header not found. Install or check PCRE developing package!)])
AC_CHECK_LIB([pcre],[pcre_compile],[AC_MSG_NOTICE([PCRE: Pass global library using])],
    [AC_MSG_ERROR(PCRE library not found. Install or check PCRE package!)])

AC_MSG_RESULT(========== Build modules list =============)
#> DB modules
AC_SUBST(DBSub_mod)
if test $enable_ForDist = yes -o $ModDBF = true; then
    AC_MSG_RESULT(Build module: DB.DBF)
    AC_CONFIG_FILES(src/moduls/bd/DBF/Makefile)
    DBSub_mod="${DBSub_mod}DBF "
fi
if test $enable_ForDist = yes -o $ModMySQL = true; then
    AC_MSG_RESULT(Build module: DB.MySQL)
    AC_CONFIG_FILES(src/moduls/bd/MySQL/Makefile)
    DBSub_mod="${DBSub_mod}MySQL "
    #>> Modules checkings
    AX_LIB_MYSQL
    if test "$found_mysql" != "yes"; then AC_MSG_ERROR(DB.MySQL: MySQL development resources not found. Install or check MySQL development package!); fi
fi
if test $enable_ForDist = yes -o $enable_SQLite = yes -o $enable_SQLite = incl; then
    AC_MSG_RESULT(Build module: DB.SQLite)
    AC_CONFIG_FILES(src/moduls/bd/SQLite/Makefile)
    DBSub_mod="${DBSub_mod}SQLite "
    #>> Modules checkings
    PKG_CHECK_MODULES([sqlite3],[sqlite3 > 3],
	[AC_CHECK_LIB([sqlite3],[sqlite3_open],[],[AC_MSG_ERROR(SQLite3 library is not usable!)])],
	[AC_MSG_ERROR(DB.SQLite: SQLite3 development resources not found. Install or check SQLite3 development package!)])
    if test $enable_SQLite = incl; then
	AC_MSG_RESULT(Include to core module: DB.SQLite);
	LIB_CORE="${LIB_CORE} moduls/bd/SQLite/.libs/*.o ${sqlite3_LIBS} "
	AC_DEFINE(MOD_DB_SQLite_INCL,[],[Module DB.SQLite include to core.])
	ModsIncl="${ModsIncl}bd_SQLite "
    fi
fi
if test $enable_ForDist = yes -o $ModFireBird = true; then
    AC_MSG_RESULT(Build module: DB.FireBird)
    AC_CONFIG_FILES(src/moduls/bd/FireBird/Makefile)
    DBSub_mod="${DBSub_mod}FireBird "
    #>> Modules checkings
    AX_LIB_FIREBIRD([2.0.0])
    if test "$success" != "yes"; then AC_MSG_ERROR(DB.FireBird: FireBird development resources not found. Install or check FireBird development package!); fi
fi
if test $enable_ForDist = yes -o $ModPostgreSQL = true; then
    AC_MSG_RESULT(Build module: DB.PostgreSQL)
    AC_CONFIG_FILES(src/moduls/bd/PostgreSQL/Makefile)
    DBSub_mod="${DBSub_mod}PostgreSQL "
    #>> Modules checkings
    AX_LIB_POSTGRESQL([8.3.0])
    if test "$found_postgresql" != "yes"; then AC_MSG_ERROR(DB.PostgreSQL: PostgreSQL development resources not found. Install or check PostgreSQL development package!); fi
fi
#> DAQ modules
AC_SUBST(DAQSub_mod)
if test $enable_ForDist = yes -o $ModSystem = true; then
    AC_MSG_RESULT(Build module: DAQ.System)
    AC_CONFIG_FILES(src/moduls/daq/System/Makefile)
    DAQSub_mod="${DAQSub_mod}System "
    #>> Modules checkings
    SensorsUse=true;
fi
if test $enable_ForDist = yes -o $ModBlockCalc = true; then
    AC_MSG_RESULT(Build module: DAQ.BlockCalc)
    AC_CONFIG_FILES(src/moduls/daq/BlockCalc/Makefile)
    DAQSub_mod="${DAQSub_mod}BlockCalc "
fi
if test $enable_ForDist = yes -o $ModJavaLikeCalc = true; then
    AC_MSG_RESULT(Build module: DAQ.JavaLikeCalc)
    AC_CONFIG_FILES(src/moduls/daq/JavaLikeCalc/Makefile)
    DAQSub_mod="${DAQSub_mod}JavaLikeCalc "
    #>> Modules checkings
    AC_PROG_YACC
    AC_CHECK_PROG(YACC_OK, bison, true, false)
    if test $YACC_OK = false; then
	AC_MSG_ERROR([No syntax generator present! Install YACC like programm bison.])
    fi
fi
if test $enable_ForDist = yes || test $ModDiamondBoards = true -a $ix86 = true; then
    AC_MSG_RESULT(Build module: DAQ.DiamondBoards)
    AC_CONFIG_FILES(src/moduls/daq/DiamondBoards/Makefile)
    DAQSub_mod="${DAQSub_mod}DiamondBoards "
fi
if test $enable_ForDist = yes -o $ModLogicLev = true; then
    AC_MSG_RESULT(Build module: DAQ.LogicLev)
    AC_CONFIG_FILES(src/moduls/daq/LogicLev/Makefile)
    DAQSub_mod="${DAQSub_mod}LogicLev "
fi
if test $enable_ForDist = yes -o $ModSNMP = true; then
    AC_MSG_RESULT(Build module: DAQ.SNMP)
    AC_CONFIG_FILES(src/moduls/daq/SNMP/Makefile)
    DAQSub_mod="${DAQSub_mod}SNMP "
    #>> Modules checkings
    AC_CHECK_HEADERS([net-snmp/net-snmp-config.h],[],
	[AC_MSG_ERROR(DAQ.SNMP: Net SNMP library headers not found. Install or check of Net SNMP developing package!)])
#    AC_CHECK_LIB([crypto],[SSL_CTX_use_certificate],[AC_MSG_NOTICE(Pass global library using)],
#	[AC_MSG_ERROR(Open SSL library not found. Install or check Open SSL library package!)])
#    AC_CHECK_LIB([netsnmp],[snmp_sess_init],[AC_MSG_NOTICE(Pass global library using)],
#	[AC_MSG_ERROR(DAQ.SNMP: Net SNMP API library not found. Install or check Net SNMP library package!)],
#	[crypto])
fi
if test $enable_ForDist = yes -o $ModSiemens = true; then
    AC_MSG_RESULT(Build module: DAQ.Siemens)
    AC_CONFIG_FILES(src/moduls/daq/Siemens/Makefile)
    DAQSub_mod="${DAQSub_mod}Siemens "
    #>> Modules checkings
    AC_CHECK_HEADERS([ctype.h],[],
	[AC_MSG_ERROR(DAQ.Siemens: Some GLibC network headers not found. Install or check GLibC developing package!)])
    AC_CHECK_HEADERS([linux/kd.h],[],
	[AC_MSG_ERROR(DAQ.Siemens: Linux kernel headers not found. Install or check Linux kernel headers package!)])
fi
if test $enable_ForDist = yes -o $enable_ModBus = yes -o $enable_ModBus = incl; then
    AC_MSG_RESULT(Build module: DAQ.ModBus)
    AC_CONFIG_FILES(src/moduls/daq/ModBus/Makefile)
    DAQSub_mod="${DAQSub_mod}ModBus "
    if test $enable_ModBus = incl; then
	AC_MSG_RESULT(Include to core module: DAQ.ModBus);
	LIB_CORE="${LIB_CORE} moduls/daq/ModBus/.libs/*.o "
	AC_DEFINE(MOD_DAQ_ModBus_INCL,[],[Module DAQ.ModBus include to core.])
	ModsIncl="${ModsIncl}daq_ModBus "
    fi
fi
if test $enable_ForDist = yes -o $ModDCON = true; then
    AC_MSG_RESULT(Build module: DAQ.DCON)
    AC_CONFIG_FILES(src/moduls/daq/DCON/Makefile)
    DAQSub_mod="${DAQSub_mod}DCON "
fi
if test $enable_ForDist = yes -o $ModDAQGate = true; then
    AC_MSG_RESULT(Build module: DAQ.DAQGate)
    AC_CONFIG_FILES(src/moduls/daq/DAQGate/Makefile)
    DAQSub_mod="${DAQSub_mod}DAQGate "
fi
if test $enable_ForDist = yes -o $ModSoundCard = true; then
    AC_MSG_RESULT(Build module: DAQ.SoundCard)
    AC_CONFIG_FILES(src/moduls/daq/SoundCard/Makefile)
    DAQSub_mod="${DAQSub_mod}SoundCard "
    #>> Modules checkings
    AC_CHECK_HEADERS([portaudio.h],[],
	[AC_MSG_ERROR(DAQ.SoundCard: Some Portaudio headers not found. Install or check Portaudio developing package!)])
    AC_CHECK_LIB([portaudio],[Pa_Initialize],[AC_MSG_NOTICE([LibPortaudio: Pass global library using])],
	[AC_MSG_ERROR(Portaudio library not found. Install or check Portaudio library package!)])
fi
if test $enable_ForDist = yes || test $ModICP_DAS = true -a $ix86 = true || test $ModICP_DAS = true -a $target_cpu = "arm"; then
    AC_MSG_RESULT(Build module: DAQ.ICP_DAS)
    AC_CONFIG_FILES(src/moduls/daq/ICP_DAS/Makefile)
    DAQSub_mod="${DAQSub_mod}ICP_DAS "
    #>> Modules checkings
    ICP_DAS_CFLAGS="-I./include"
    ICP_DAS_LIBS="-L./ -li8k"
    if test $target_cpu = "arm"; then ICP_DAS_LIBS="-L./ -li8k_arm"; ICP_DAS_CFLAGS="-I./include_arm"; fi
    AC_SUBST(ICP_DAS_CFLAGS)
    AC_SUBST(ICP_DAS_LIBS)
fi
if test $enable_ForDist = yes -o $ModOPC_UA = true; then
    AC_MSG_RESULT(Build module: DAQ.OPC_UA)
    AC_CONFIG_FILES(src/moduls/daq/OPC_UA/Makefile)
    DAQSub_mod="${DAQSub_mod}OPC_UA "
    #>> Modules checkings
    AC_CHECK_HEADERS([openssl/ssl.h openssl/err.h openssl/bio.h],[],
	[AC_MSG_ERROR(Transport.SSL: Some OpenSSL headers not found. Install or check OpenSSL developing package!)])
    AC_CHECK_LIB([ssl],[SSL_library_init],[AC_MSG_NOTICE([LibSSL: Pass global library using])],
	[AC_MSG_ERROR(Transport.SSL: OpenSSL library not found. Install or check OpenSSL installation!)])
fi
if test $enable_ForDist = yes -o $ModAMRDevs = true; then
    AC_MSG_RESULT(Build module: DAQ.AMRDevs)
    AC_CONFIG_FILES(src/moduls/daq/AMRDevs/Makefile)
    DAQSub_mod="${DAQSub_mod}AMRDevs "
fi
if test $enable_ForDist = yes -o $ModBFN = true; then
    AC_MSG_RESULT(Build module: DAQ.BFN)
    AC_CONFIG_FILES(src/moduls/daq/BFN/Makefile)
    DAQSub_mod="${DAQSub_mod}BFN "
fi
#> Archive modules
AC_SUBST(ArchSub_mod)
if test $enable_ForDist = yes -o $ModFSArch = true; then
    AC_MSG_RESULT(Build module: Archive.FSArch)
    AC_CONFIG_FILES(src/moduls/arhiv/FSArch/Makefile)
    ArchSub_mod="${ArchSub_mod}FSArch "
fi
if test $enable_ForDist = yes -o $ModDBArch = true; then
    AC_MSG_RESULT(Build module: Archive.DBArch)
    AC_CONFIG_FILES(src/moduls/arhiv/DBArch/Makefile)
    ArchSub_mod="${ArchSub_mod}DBArch "
fi
#> Transport modules
AC_SUBST(TranspSub_mod)
if test $enable_ForDist = yes -o $ModSockets = true; then
    AC_MSG_RESULT(Build module: Transport.Sockets)
    AC_CONFIG_FILES(src/moduls/transport/Sockets/Makefile)
    TranspSub_mod="${TranspSub_mod}Sockets "
    #>> Modules checkings
    AC_CHECK_HEADERS([sys/un.h sys/socket.h sys/select.h arpa/inet.h netinet/in.h netdb.h],[],
	[AC_MSG_ERROR(Transport.Sockets: Some GLibC network headers not found. Install or check GLibC developing package!)])
fi
if test $enable_ForDist = yes -o $ModSSL = true; then
    AC_MSG_RESULT(Build module: Transport.SSL)
    AC_CONFIG_FILES(src/moduls/transport/SSL/Makefile)
    TranspSub_mod="${TranspSub_mod}SSL "
    #>> Modules checkings
    AC_CHECK_HEADERS([openssl/ssl.h openssl/err.h openssl/bio.h],[],
	[AC_MSG_ERROR(Transport.SSL: Some OpenSSL headers not found. Install or check OpenSSL developing package!)])
    AC_CHECK_LIB([ssl],[SSL_library_init],[AC_MSG_NOTICE([LibSSL: Pass global library using])],
	[AC_MSG_ERROR(Transport.SSL: OpenSSL library not found. Install or check OpenSSL installation!)])
fi
if test $enable_ForDist = yes -o $ModSerial = true; then
    AC_MSG_RESULT(Build module: Transport.Serial)
    AC_CONFIG_FILES(src/moduls/transport/Serial/Makefile)
    TranspSub_mod="${TranspSub_mod}Serial "
fi
#> Transport protocol modules
AC_SUBST(ProtSub_mod)
if test $enable_ForDist = yes -o $ModHTTP = true; then
    AC_MSG_RESULT(Build module: Protocol.HTTP)
    AC_CONFIG_FILES(src/moduls/protocol/HTTP/Makefile)
    ProtSub_mod="${ProtSub_mod}HTTP "
fi
if test $enable_ForDist = yes -o $ModSelfSystem = true; then
    AC_MSG_RESULT(Build module: Protocol.SelfSystem)
    AC_CONFIG_FILES(src/moduls/protocol/SelfSystem/Makefile)
    ProtSub_mod="${ProtSub_mod}SelfSystem "
fi
if test $enable_ForDist = yes -o $ModUserProtocol = true; then
    AC_MSG_RESULT(Build module: Protocol.UserProtocol)
    AC_CONFIG_FILES(src/moduls/protocol/UserProtocol/Makefile)
    ProtSub_mod="${ProtSub_mod}UserProtocol "
fi
#> UI modules
AC_SUBST(UISub_mod)
if test $enable_ForDist = yes -o $ModVCAEngine = true; then
    AC_MSG_RESULT(Build module: UI.VCAEngine)
    AC_CONFIG_FILES(src/moduls/ui/VCAEngine/Makefile)
    UISub_mod="${UISub_mod}VCAEngine "
fi
if test $enable_ForDist = yes -o $ModVision = true; then
    AC_MSG_RESULT(Build module: UI.Vision)
    AC_CONFIG_FILES(src/moduls/ui/Vision/Makefile)
    UISub_mod="${UISub_mod}Vision "
    #>> Modules checkings
    QT4use=true;
    FFTWuse=true;
fi
if test $enable_ForDist = yes -o $ModQTStarter = true; then
    AC_MSG_RESULT(Build module: UI.QTStarter)
    AC_CONFIG_FILES(src/moduls/ui/QTStarter/Makefile)
    UISub_mod="${UISub_mod}QTStarter "
    QT4use=true;
fi
if test $enable_ForDist = yes -o $ModQTCfg = true; then
    AC_MSG_RESULT(Build module: UI.QTCfg)
    AC_CONFIG_FILES(src/moduls/ui/QTCfg/Makefile)
    UISub_mod="${UISub_mod}QTCfg "
    QT4use=true;
fi
if test $enable_ForDist = yes -o $ModWebCfg = true; then
    AC_MSG_RESULT(Build module: UI.WebCfg)
    AC_CONFIG_FILES(src/moduls/ui/WebCfg/Makefile)
    UISub_mod="${UISub_mod}WebCfg "
fi
if test $enable_ForDist = yes -o $ModWebCfgD = true; then
    AC_MSG_RESULT(Build module: UI.WebCfgD)
    AC_CONFIG_FILES(src/moduls/ui/WebCfgD/Makefile)
    UISub_mod="${UISub_mod}WebCfgD "
    GDuse=true;
fi
if test $enable_ForDist = yes -o $ModWebVision = true; then
    AC_MSG_RESULT(Build module: UI.WebVision)
    AC_CONFIG_FILES(src/moduls/ui/WebVision/Makefile)
    UISub_mod="${UISub_mod}WebVision "
    #>> Modules checkings
    FFTWuse=true;
    GDuse=true;
fi
if test $enable_ForDist = yes -o $ModWebUser = true; then
    AC_MSG_RESULT(Build module: UI.WebUser)
    AC_CONFIG_FILES(src/moduls/ui/WebUser/Makefile)
    UISub_mod="${UISub_mod}WebUser "
fi
#> Special modules
AC_SUBST(SpecSub_mod)
if test $enable_ForDist = yes -o $ModSystemTests = true; then
    AC_MSG_RESULT(Build module: Special.SystemTests)
    AC_CONFIG_FILES(src/moduls/special/SystemTests/Makefile)
    SpecSub_mod="${SpecSub_mod}SystemTests "
fi
if test $enable_ForDist = yes -o $ModFLibComplex1 = true; then
    AC_MSG_RESULT(Build module: Special.FLibComplex1)
    AC_CONFIG_FILES(src/moduls/special/FLibComplex1/Makefile)
    SpecSub_mod="${SpecSub_mod}FLibComplex1 "
fi
if test $enable_ForDist = yes -o $ModFLibMath = true; then
    AC_MSG_RESULT(Build module: Special.FLibMath)
    AC_CONFIG_FILES(src/moduls/special/FLibMath/Makefile)
    SpecSub_mod="${SpecSub_mod}FLibMath "
fi
if test $enable_ForDist = yes -o $ModFLibSYS = true; then
    AC_MSG_RESULT(Build module: Special.FLibSYS)
    AC_CONFIG_FILES(src/moduls/special/FLibSYS/Makefile)
    SpecSub_mod="${SpecSub_mod}FLibSYS "
    #>> Modules checkings
    FFTWuse=true;
fi
AC_MSG_RESULT(===========================================)

#QT4 check
if test $QT4use = true; then
    AC_ARG_WITH(qt4-dir,[  --with-qt4-dir=DIR      Path to directory where QT4 instaled (/usr/lib/qt4 - default) ], [QT4_DIR="$withval"], [QT4_DIR="/usr/lib/qt4"])
    AC_CHECK_PROGS(QT4_MOC, moc-qt4 moc, false)
    AC_CHECK_PROGS(QT4_RCC, rcc-qt4 rcc, false)
    if test $QT4_MOC = false -o $QT4_RCC = false;
    then if test -d $QT4_DIR;
	 then
	   QT4_MOC="${QT4_DIR}/bin/moc";
	   QT4_RCC="${QT4_DIR}/bin/rcc";
         else AC_MSG_ERROR([QT4 development utilites no present (into directory ${QT4_DIR})! Install QT4 library development package.]); fi;
    fi;
    QT4_INCL="$(pkg-config --cflags QtGui)"
    QT4_LIB="$(pkg-config --libs QtGui)"
    AC_SUBST(QT4_INCL)
    AC_SUBST(QT4_LIB)
fi

if test $FFTWuse = true; then
    AC_CHECK_HEADERS([fftw3.h],
	[
	    AC_CHECK_LIB([fftw3],[fftw_execute],
		[AC_MSG_NOTICE([LibFFTW3: Pass global library using])
		LIB_FFTW="-lfftw3"],[AC_MSG_NOTICE(FFTW3 library not found. Using is disabled!)])
	],[AC_MSG_NOTICE(Some FFTW3 headers not found. Using is disabled!)])
    AC_SUBST(LIB_FFTW)
fi

if test $GDuse = true; then
    AC_CHECK_HEADERS([gd.h],[],
	[AC_MSG_ERROR(GD library headers not found. Install or check GD developing package!)])
    AC_CHECK_LIB([gd],[gdImageCreate],[AC_MSG_NOTICE([LibGD: Pass global library using])],
	[AC_MSG_ERROR(GD library not found. Install or check GDlib package!)])
fi

if test $SensorsUse = true; then
    AC_CHECK_HEADERS([sensors/sensors.h],
	[
	    AC_CHECK_LIB([sensors],[sensors_init],
		[AC_MSG_NOTICE([LibSensors: Pass global library using])
		LIB_SENSORS="-lsensors"],[AC_MSG_NOTICE(Libsensors library not found. Using is disabled!)])
	],[AC_MSG_NOTICE(DAQ.System: Libsensors headers not found. Using is disabled!)])
    AC_SUBST(LIB_SENSORS)
fi

AC_DEFINE_UNQUOTED(MODS_INCL, "${ModsIncl}",[Included to core modules list.])

# Clear libs list after PKG_CHECK_MODULES
LIBS=""

AC_OUTPUT

AC_MSG_RESULT([============ Final configuration results ==============])
AC_MSG_RESULT([* Generic features:])
AC_MSG_RESULT([  - Crosscompile build                                          = $enable_CrossCompile])
AC_MSG_RESULT([  - Strings charset encode support (by iconv)                   = $ac_cv_header_iconv_h])
AC_MSG_RESULT([  - Interfaces internationalisation (I18N) support (by LibIntl) = $ac_cv_header_libintl_h])
AC_MSG_RESULT([  - Graphical library (LibGD2) use by core                      = $enable_LibGD])
AC_MSG_RESULT([  - Subsystem "DB" modules build:                   $DBSub_mod])
AC_MSG_RESULT([  - Subsystem "DAQ" modules build:                  $DAQSub_mod])
AC_MSG_RESULT([  - Subsystem "Archive" modules build:              $ArchSub_mod])
AC_MSG_RESULT([  - Subsystem "Transport" modules build:            $TranspSub_mod])
AC_MSG_RESULT([  - Subsystem "Transport's protocol" modules build: $ProtSub_mod])
AC_MSG_RESULT([  - Subsystem "UI" modules build:                   $UISub_mod])
AC_MSG_RESULT([  - Subsystem "Special" modules build:              $SpecSub_mod])
AC_MSG_RESULT([  - Modules list included to OpenSCADA core: $ModsIncl])
AC_MSG_RESULT([* Modules' features:])
if test $FFTWuse = true; then
    AC_MSG_RESULT([  - FFTW3 library use for signal spectrum purchase: $LIB_FFTW])
fi
if test $SensorsUse = true; then
    AC_MSG_RESULT([  - Linux sensors library use: $LIB_SENSORS])
fi
