
AC_PREREQ([2.50])

AC_INIT([OpenSCADA],[0.8.0],[rom_as@oscada.org, rom_as@fromru.com])
AC_PREFIX_DEFAULT([/usr])
oscd_LIBREVISION="2:0:0"
oscd_modulpref="oscd_"

AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE(AC_PACKAGE_TARNAME, AC_PACKAGE_VERSION)
AM_CONFIG_HEADER(src/config.h)

AC_LANG(C++)

# Perform program name transformation
#AC_ARG_PROGRAM

# Enable options
AC_ENABLE_SHARED(yes)
AC_ENABLE_STATIC(yes)
AC_LIBTOOL_DLOPEN

# AM_GNU_GETTEXT

# Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_LIBTOOL

if test "$ac_cv_prog_cc_g" = "no" -o "$ac_cv_prog_cxx_g" = "no"; then
    AC_MSG_ERROR([No C or C++ compiler present. Install GCC and G++.]);
fi

AC_CHECK_PROG(have_pkg_config, pkg-config, yes, no)
if test x"$have_pkg_config" = "xno"; then
    AC_MSG_ERROR(pkg-config is required to install this program)
fi
PKG_PROG_PKG_CONFIG

AM_SANITY_CHECK

# Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([time.h signal.h semaphore.h fcntl.h math.h errno.h syslog.h unistd.h dirent.h stdio.h stdarg.h stdlib.h getopt.h dlfcn.h locale.h langinfo.h sys/types.h sys/stat.h sys/time.h sys/utsname.h pthread.h],[],
    [AC_MSG_ERROR(Some GLibC headers not found. Install or check GLibC developing package!)])
AC_CHECK_HEADERS([string vector map exception typeinfo deque],[],
    [AC_MSG_ERROR([Some standard template libs' STL headers not found. Install or check STL-StdC++ developing package!])])
AC_CHECK_HEADERS([iconv.h],[ ],[AC_MSG_NOTICE(iconv.h header not found. Using is disabled!)])
AC_CHECK_HEADERS([libintl.h],[ ],[AC_MSG_NOTICE(libintl.h header not found. Using is disabled!)])

#Gettext utilites check
if test $ac_cv_header_libintl_h = yes; then
    AC_CHECK_PROG(XGETTEXT, xgettext, xgettext, false)
    AC_CHECK_PROG(MSGMERGE, msgmerge, msgmerge, false)
    AC_CHECK_PROG(MSGFMT, msgfmt, msgfmt, false)
    if test $XGETTEXT = false -o $MSGMERGE = false -o $MSGFMT = false; then
	AC_MSG_ERROR([Some gettext I18N utilite no present! Install gettext utilites package.]);
    fi
    AC_CHECK_LIB([intl],[bindtextdomain],[LIB_CORE="${LIB_CORE}-lintl "])
fi

if test $ac_cv_header_iconv_h = yes; then
    AC_CHECK_LIB([iconv],[libiconv_open],[LIB_CORE="${LIB_CORE}-liconv "])
fi

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

# Set up system library
AC_SUBST(sys_lib)
sys_lib="/usr/lib"
if test $target_cpu = "x86_64"; then sys_lib="/usr/lib64"; fi

AC_SUBST(LIB_CORE)

ix86=no;
if test $target_cpu = "i386" -o $target_cpu = "i486" -o $target_cpu = "i586" -o $target_cpu = "i686" -o \
    $target_cpu = "k6" -o $target_cpu = "athlon" -o $target_cpu = "pentium2" -o $target_cpu = "pentium3" -o \
    $target_cpu = "pentium4"; then ix86=yes; fi

# Checks for library functions.
AC_FUNC_CLOSEDIR_VOID
AC_FUNC_MKTIME
AC_FUNC_SELECT_ARGTYPES
AC_TYPE_SIGNAL
AC_FUNC_STAT
#AC_CHECK_FUNCS([getcwd gethostbyname inet_ntoa memmove memset mkdir nl_langinfo pow select setenv setlocale socket strdup strerror strtol uname])
AC_ISC_POSIX

oscd_moduldir="\${libdir}/${PACKAGE}"
AC_SUBST(oscd_LIBREVISION)
AC_SUBST(oscd_moduldir)
AC_SUBST(oscd_modulpref)

AC_CONFIG_FILES(Makefile src/Makefile src_call/Makefile src/moduls/Makefile
	src/moduls/arhiv/Makefile src/moduls/bd/Makefile src/moduls/protocol/Makefile
	src/moduls/special/Makefile src/moduls/daq/Makefile src/moduls/transport/Makefile
	src/moduls/ui/Makefile)

#====== Generic functions enable/disable ======
AC_ARG_ENABLE(CrossCompile,AC_HELP_STRING([--enable-CrossCompile], [enable crosscompile build]),[ ],
[ if test $host = $build; then enable_CrossCompile=no; else enable_CrossCompile=yes; fi])
AC_ARG_ENABLE(CoreLibStatic,AC_HELP_STRING([--enable-CoreLibStatic], [enable OpenSCADA core lib no shared, only static.]),
[ liboscada_la_LIBTOOLFLAGS="--tag=disable-shared"; AC_SUBST(liboscada_la_LIBTOOLFLAGS) ],[ enable_CoreLibStatic=no; ])
AC_ARG_ENABLE(LibGD,AC_HELP_STRING([--disable-LibGD], [disable using library LibGD in core]),[ ],[ enable_LibGD=yes; ])
AC_ARG_ENABLE(AllModuls,AC_HELP_STRING([--enable-AllModuls], [all modules enable/disable for separated modules select]),[ ],[ enable_AllModuls=individual; ])

AC_MSG_RESULT(========== Core libraries check =============)
# Check for libraries
if test $enable_CrossCompile = no; then
    AC_FUNC_MALLOC
    AC_FUNC_REALLOC
fi
AC_CHECK_LIB([m],[sin],[AC_MSG_NOTICE([LibM: Pass global library using])],
    [AC_MSG_ERROR(Math library not found. Install or check GLibC core package!)])
AC_CHECK_LIB([dl],[dlopen],[AC_MSG_NOTICE([LibDl: Pass global library using])],
    [AC_MSG_ERROR(Dynamik linking library not found. Install or check GLibC core package!)])
#AC_CHECK_LIB([rt],[pthread_create],[AC_MSG_NOTICE(Pass global library using)],
#    [AC_MSG_ERROR(Pthread library not found. Install or check GLibC core package!)])
AC_CHECK_LIB([crypt],[crypt],[AC_MSG_NOTICE([LibCrypt: Pass global library using])],
    [AC_MSG_ERROR(Crypt library not found. Install or check GLibC core package!)])
AC_CHECK_LIB([z],[deflate],[AC_MSG_NOTICE([LibZ: Pass global library using])],
    [AC_MSG_ERROR(Z library not found. Install or check libz package!)])

#> Check for GD library use in OpenSCADA core
if test $enable_LibGD = yes; then
    AC_CHECK_HEADERS([gd.h],
	[
	    AC_CHECK_LIB([gd],[gdImageCreate],
	    [AC_MSG_NOTICE([LibGD: Pass global library using]); LIB_CORE="${LIB_CORE}-lgd "],
	    [AC_MSG_ERROR(GD library not found. Install or check GDlib package!)])
	],
	[AC_MSG_ERROR(GD library headers not found. Install or check GD developing package!)])
fi

#> Check for PCRE library use in OpenSCADA core
CXXFLAGS="$CXXFLAGS $(pkg-config --cflags libpcre)"
AC_CHECK_HEADERS([pcre.h],[],
    [AC_MSG_ERROR(PCRE header not found. Install or check PCRE developing package!)])
AC_CHECK_LIB([pcre],[pcre_compile],[AC_MSG_NOTICE([PCRE: Pass global library using])],
    [AC_MSG_ERROR(PCRE library not found. Install or check PCRE package!)])

AC_MSG_RESULT(========== Build modules check =============)
#> DB modules
AC_SUBST(DBSub_mod)
AX_MOD_EN(DBF,[disable or enable[=incl] build module DB.DBF],disable,incl,
[
    AC_MSG_RESULT(Build module: DB.DBF)
    AC_CONFIG_FILES(src/moduls/bd/DBF/Makefile)
    DBSub_mod="${DBSub_mod}DBF "
    if test $enable_DBF = incl; then
	LIB_CORE="${LIB_CORE} moduls/bd/DBF/.libs/*.o "
	ModsIncl="${ModsIncl}bd_DBF "
    fi
])
AX_MOD_EN(MySQL,[disable or enable[=incl] build module DB.MySQL],disable,incl,
[
    AC_MSG_RESULT(Build module: DB.MySQL)
    AC_CONFIG_FILES(src/moduls/bd/MySQL/Makefile)
    DBSub_mod="${DBSub_mod}MySQL "
    #>> Modules checkings
    AX_LIB_MYSQL
    if test "$found_mysql" != "yes"; then AC_MSG_ERROR(DB.MySQL: MySQL development resources not found. Install or check MySQL development package!); fi
    if test $enable_MySQL = incl; then
	LIB_CORE="${LIB_CORE} moduls/bd/MySQL/.libs/*.o ${MYSQL_LDFLAGS} "
	ModsIncl="${ModsIncl}bd_MySQL "
    fi
])
AX_MOD_EN(SQLite,[disable or enable[=incl] build module DB.SQLite],disable,incl,
[
    AC_MSG_RESULT(Build module: DB.SQLite)
    AC_CONFIG_FILES(src/moduls/bd/SQLite/Makefile)
    DBSub_mod="${DBSub_mod}SQLite "
    #>> Modules checkings
    PKG_CHECK_MODULES([sqlite3],[sqlite3 > 3],
	[AC_CHECK_LIB([sqlite3],[sqlite3_open],[],[AC_MSG_ERROR(SQLite3 library is not usable!)])],
	[AC_MSG_ERROR(DB.SQLite: SQLite3 development resources not found. Install or check SQLite3 development package!)])
    if test $enable_SQLite = incl; then
	LIB_CORE="${LIB_CORE} moduls/bd/SQLite/.libs/*.o ${sqlite3_LIBS} "
	ModsIncl="${ModsIncl}bd_SQLite "
    fi
])
AX_MOD_EN(FireBird,[disable or enable[=incl] build module DB.FireBird],disable,incl,
[
    AC_MSG_RESULT(Build module: DB.FireBird)
    AC_CONFIG_FILES(src/moduls/bd/FireBird/Makefile)
    DBSub_mod="${DBSub_mod}FireBird "
    #>> Modules checkings
    AX_LIB_FIREBIRD([2.0.0])
    if test "$success" != "yes"; then AC_MSG_ERROR(DB.FireBird: FireBird development resources not found. Install or check FireBird development package!); fi
    if test $enable_FireBird = incl; then
	LIB_CORE="${LIB_CORE} moduls/bd/FireBird/.libs/*.o ${FIREBIRD_LDFLAGS} "
	ModsIncl="${ModsIncl}bd_FireBird "
    fi
])
AX_MOD_EN(PostgreSQL,[disable or enable[=incl] build module DB.PostgreSQL],disable,incl,
[
    AC_MSG_RESULT(Build module: DB.PostgreSQL)
    AC_CONFIG_FILES(src/moduls/bd/PostgreSQL/Makefile)
    DBSub_mod="${DBSub_mod}PostgreSQL "
    #>> Modules checkings
    AX_LIB_POSTGRESQL([8.3.0])
    if test "$found_postgresql" != "yes"; then AC_MSG_ERROR(DB.PostgreSQL: PostgreSQL development resources not found. Install or check PostgreSQL development package!); fi
    if test $enable_PostgreSQL = incl; then
	LIB_CORE="${LIB_CORE} moduls/bd/PostgreSQL/.libs/*.o ${POSTGRESQL_LDFLAGS} "
	ModsIncl="${ModsIncl}bd_PostgreSQL "
    fi
])
#> DAQ modules
AC_SUBST(DAQSub_mod)
AX_MOD_EN(System,[disable or enable[=incl] build module DAQ.System],disable,incl,
[
    AC_MSG_RESULT(Build module: DAQ.System)
    AC_CONFIG_FILES(src/moduls/daq/System/Makefile)
    DAQSub_mod="${DAQSub_mod}System "
    #>> Modules checkings
    AX_LIB_SENSORS()
    if test $enable_System = incl; then
	LIB_CORE="${LIB_CORE} moduls/daq/System/.libs/*.o ${LIB_SENSORS} "
	ModsIncl="${ModsIncl}daq_System "
    fi

])
AX_MOD_EN(BlockCalc,[disable or enable[=incl] build module DAQ.BlockCalc],disable,incl,
[
    AC_MSG_RESULT(Build module: DAQ.BlockCalc)
    AC_CONFIG_FILES(src/moduls/daq/BlockCalc/Makefile)
    DAQSub_mod="${DAQSub_mod}BlockCalc "
    if test $enable_BlockCalc = incl; then
	LIB_CORE="${LIB_CORE} moduls/daq/BlockCalc/.libs/*.o "
	ModsIncl="${ModsIncl}daq_BlockCalc "
    fi
])
AX_MOD_EN(JavaLikeCalc,[disable or enable[=incl] build module DAQ.BlockCalc],disable,incl,
[
    AC_MSG_RESULT(Build module: DAQ.JavaLikeCalc)
    AC_CONFIG_FILES(src/moduls/daq/JavaLikeCalc/Makefile)
    DAQSub_mod="${DAQSub_mod}JavaLikeCalc "
    #>> Modules checkings
    AC_PROG_YACC
    AC_CHECK_PROG(YACC_OK, bison, true, false)
    if test $YACC_OK = false; then
	AC_MSG_ERROR([No syntax generator present! Install YACC like programm bison.])
    fi
    if test $enable_JavaLikeCalc = incl; then
	LIB_CORE="${LIB_CORE} moduls/daq/JavaLikeCalc/.libs/*.o "
	ModsIncl="${ModsIncl}daq_JavaLikeCalc "
    fi
])
AX_MOD_EN(DiamondBoards,[enable build module DAQ.DiamondBoards],enable,[],
[
    if test $ix86 = yes; then
	AC_MSG_RESULT(Build module: DAQ.DiamondBoards)
	AC_CONFIG_FILES(src/moduls/daq/DiamondBoards/Makefile)
	DAQSub_mod="${DAQSub_mod}DiamondBoards "
    fi
])
AX_MOD_EN(LogicLev,[disable or enable[=incl] build module DAQ.LogicLev],disable,incl,
[
    AC_MSG_RESULT(Build module: DAQ.LogicLev)
    AC_CONFIG_FILES(src/moduls/daq/LogicLev/Makefile)
    DAQSub_mod="${DAQSub_mod}LogicLev "
    if test $enable_LogicLev = incl; then
	LIB_CORE="${LIB_CORE} moduls/daq/LogicLev/.libs/*.o "
	ModsIncl="${ModsIncl}daq_LogicLev "
    fi
])
AX_MOD_EN(SNMP,[disable build module DAQ.SNMP],disable,[],
[
    AC_MSG_RESULT(Build module: DAQ.SNMP)
    AC_CONFIG_FILES(src/moduls/daq/SNMP/Makefile)
    DAQSub_mod="${DAQSub_mod}SNMP "
    #>> Modules checkings
    AC_CHECK_HEADERS([net-snmp/net-snmp-config.h],[],
	[AC_MSG_ERROR(DAQ.SNMP: Net SNMP library headers not found. Install or check of Net SNMP developing package!)])
#    AC_CHECK_LIB([netsnmp],[snmp_sess_init],[AC_MSG_NOTICE(Pass global library using)],
#	[AC_MSG_ERROR(DAQ.SNMP: Net SNMP API library not found. Install or check Net SNMP library package!)],
#	[crypto])
])
AX_MOD_EN(Siemens,[disable build module DAQ.Siemens],disable,[],
[
    AC_MSG_RESULT(Build module: DAQ.Siemens)
    AC_CONFIG_FILES(src/moduls/daq/Siemens/Makefile)
    DAQSub_mod="${DAQSub_mod}Siemens "
    #>> Modules checkings
    AC_CHECK_HEADERS([ctype.h],[],
	[AC_MSG_ERROR(DAQ.Siemens: Some GLibC network headers not found. Install or check GLibC developing package!)])
    AC_CHECK_HEADERS([linux/kd.h],[],
	[AC_MSG_ERROR(DAQ.Siemens: Linux kernel headers not found. Install or check Linux kernel headers package!)])
])
AX_MOD_EN(ModBus,[disable or enable[=incl] build module DAQ.ModBus],disable,incl,
[
    AC_MSG_RESULT(Build module: DAQ.ModBus)
    AC_CONFIG_FILES(src/moduls/daq/ModBus/Makefile)
    DAQSub_mod="${DAQSub_mod}ModBus "
    if test $enable_ModBus = incl; then
	LIB_CORE="${LIB_CORE} moduls/daq/ModBus/.libs/*.o "
	ModsIncl="${ModsIncl}daq_ModBus "
    fi
])
AX_MOD_EN(DCON,[disable or enable[=incl] build module DAQ.DCON],disable,incl,
[
    AC_MSG_RESULT(Build module: DAQ.DCON)
    AC_CONFIG_FILES(src/moduls/daq/DCON/Makefile)
    DAQSub_mod="${DAQSub_mod}DCON "
    if test $enable_DCON = incl; then
	LIB_CORE="${LIB_CORE} moduls/daq/DCON/.libs/*.o "
	ModsIncl="${ModsIncl}daq_DCON "
    fi
])
AX_MOD_EN(DAQGate,[disable or enable[=incl] build module DAQ.DAQGate],disable,incl,
[
    AC_MSG_RESULT(Build module: DAQ.DAQGate)
    AC_CONFIG_FILES(src/moduls/daq/DAQGate/Makefile)
    DAQSub_mod="${DAQSub_mod}DAQGate "
    if test $enable_DAQGate = incl; then
	LIB_CORE="${LIB_CORE} moduls/daq/DAQGate/.libs/*.o "
	ModsIncl="${ModsIncl}daq_DAQGate "
    fi
])
AX_MOD_EN(SoundCard,[disable build module DAQ.SoundCard],disable,[],
[
    AC_MSG_RESULT(Build module: DAQ.SoundCard)
    AC_CONFIG_FILES(src/moduls/daq/SoundCard/Makefile)
    DAQSub_mod="${DAQSub_mod}SoundCard "
    #>> Modules checkings
    AC_CHECK_HEADERS([portaudio.h],[],
	[AC_MSG_ERROR(DAQ.SoundCard: Some Portaudio headers not found. Install or check Portaudio developing package!)])
    AC_CHECK_LIB([portaudio],[Pa_Initialize],[AC_MSG_NOTICE([LibPortaudio: Pass global library using])],
	[AC_MSG_ERROR(Portaudio library not found. Install or check Portaudio library package!)])
])
AX_MOD_EN(ICP_DAS,[enable build module DAQ.ICP_DAS],enable,[],
[
    if test $ix86 = yes -o $target_cpu = "arm"; then
	AC_MSG_RESULT(Build module: DAQ.ICP_DAS)
	AC_CONFIG_FILES(src/moduls/daq/ICP_DAS/Makefile)
	DAQSub_mod="${DAQSub_mod}ICP_DAS "
	#>> Modules checkings
	ICP_DAS_CFLAGS="-I./include"
	ICP_DAS_LIBS="-L./ -li8k"
	if test $target_cpu = "arm"; then ICP_DAS_LIBS="-L./ -li8k_arm"; ICP_DAS_CFLAGS="-I./include_arm"; fi
	AC_SUBST(ICP_DAS_CFLAGS)
	AC_SUBST(ICP_DAS_LIBS)
    fi
])
AX_MOD_EN(OPC_UA,[disable build module DAQ.OPC_UA],disable,[],
[
    AC_MSG_RESULT(Build module: DAQ.OPC_UA)
    AC_CONFIG_FILES(src/moduls/daq/OPC_UA/Makefile)
    DAQSub_mod="${DAQSub_mod}OPC_UA "
    #>> Modules checkings
    AX_LIB_OpenSSL()
])
AX_MOD_EN(AMRDevs,[enable build module DAQ.AMRDevs],enable,[],
[
    AC_MSG_RESULT(Build module: DAQ.AMRDevs)
    AC_CONFIG_FILES(src/moduls/daq/AMRDevs/Makefile)
    DAQSub_mod="${DAQSub_mod}AMRDevs "
])
AX_MOD_EN(BFN,[enable build module DAQ.BFN],enable,[],
[
    AC_MSG_RESULT(Build module: DAQ.BFN)
    AC_CONFIG_FILES(src/moduls/daq/BFN/Makefile)
    DAQSub_mod="${DAQSub_mod}BFN "
])
#> Archive modules
AC_SUBST(ArchSub_mod)
AX_MOD_EN(FSArch,[disable or enable[=incl] build module Archive.FSArch],disable,incl,
[
    AC_MSG_RESULT(Build module: Archive.FSArch)
    AC_CONFIG_FILES(src/moduls/arhiv/FSArch/Makefile)
    ArchSub_mod="${ArchSub_mod}FSArch "
    if test $enable_FSArch = incl; then
	LIB_CORE="${LIB_CORE} moduls/arhiv/FSArch/.libs/*.o "
	ModsIncl="${ModsIncl}arh_FSArch "
    fi
])
AX_MOD_EN(DBArch,[disable or enable[=incl] build module Archive.DBArch],disable,incl,
[
    AC_MSG_RESULT(Build module: Archive.DBArch)
    AC_CONFIG_FILES(src/moduls/arhiv/DBArch/Makefile)
    ArchSub_mod="${ArchSub_mod}DBArch "
    if test $enable_DBArch = incl; then
	LIB_CORE="${LIB_CORE} moduls/arhiv/DBArch/.libs/*.o "
	ModsIncl="${ModsIncl}arh_DBArch "
    fi
])
#> Transport modules
AC_SUBST(TranspSub_mod)
AX_MOD_EN(Sockets,[disable or enable[=incl] build module Transport.Sockets],disable,incl,
[
    AC_MSG_RESULT(Build module: Transport.Sockets)
    AC_CONFIG_FILES(src/moduls/transport/Sockets/Makefile)
    TranspSub_mod="${TranspSub_mod}Sockets "
    #>> Modules checkings
    AC_CHECK_HEADERS([sys/un.h sys/socket.h sys/select.h arpa/inet.h netinet/in.h netdb.h],[],
	[AC_MSG_ERROR(Transport.Sockets: Some GLibC network headers not found. Install or check GLibC developing package!)])
    if test $enable_Sockets = incl; then
	LIB_CORE="${LIB_CORE} moduls/transport/Sockets/.libs/*.o "
	ModsIncl="${ModsIncl}tr_Sockets "
    fi
])
AX_MOD_EN(SSL,[disable or enable[=incl] build module Transport.SSL],disable,incl,
[
    AC_MSG_RESULT(Build module: Transport.SSL)
    AC_CONFIG_FILES(src/moduls/transport/SSL/Makefile)
    TranspSub_mod="${TranspSub_mod}SSL "
    #>> Modules checkings
    AX_LIB_OpenSSL()
    if test $enable_SSL = incl; then
	LIB_CORE="${LIB_CORE} moduls/transport/SSL/.libs/*.o ${LIB_OpenSSL} "
	ModsIncl="${ModsIncl}tr_SSL "
    fi
])
AX_MOD_EN(Serial,[disable or enable[=incl] build module Transport.Serial],disable,incl,
[
    AC_MSG_RESULT(Build module: Transport.Serial)
    AC_CONFIG_FILES(src/moduls/transport/Serial/Makefile)
    TranspSub_mod="${TranspSub_mod}Serial "
    if test $enable_Serial = incl; then
	LIB_CORE="${LIB_CORE} moduls/transport/Serial/.libs/*.o "
	ModsIncl="${ModsIncl}tr_Serial "
    fi
])
#> Transport protocol modules
AC_SUBST(ProtSub_mod)
AX_MOD_EN(HTTP,[disable or enable[=incl] build module Protocol.HTTP],disable,incl,
[
    AC_MSG_RESULT(Build module: Protocol.HTTP)
    AC_CONFIG_FILES(src/moduls/protocol/HTTP/Makefile)
    ProtSub_mod="${ProtSub_mod}HTTP "
    if test $enable_HTTP = incl; then
	LIB_CORE="${LIB_CORE} moduls/protocol/HTTP/.libs/*.o "
	ModsIncl="${ModsIncl}prt_HTTP "
    fi
])
AX_MOD_EN(SelfSystem,[disable or enable[=incl] build module Protocol.SelfSystem],disable,incl,
[
    AC_MSG_RESULT(Build module: Protocol.SelfSystem)
    AC_CONFIG_FILES(src/moduls/protocol/SelfSystem/Makefile)
    ProtSub_mod="${ProtSub_mod}SelfSystem "
    if test $enable_SelfSystem = incl; then
	LIB_CORE="${LIB_CORE} moduls/protocol/SelfSystem/.libs/*.o "
	ModsIncl="${ModsIncl}prt_SelfSystem "
    fi
])
AX_MOD_EN(UserProtocol,[disable or enable[=incl] build module Protocol.UserProtocol],disable,incl,
[
    AC_MSG_RESULT(Build module: Protocol.UserProtocol)
    AC_CONFIG_FILES(src/moduls/protocol/UserProtocol/Makefile)
    ProtSub_mod="${ProtSub_mod}UserProtocol "
    if test $enable_UserProtocol = incl; then
	LIB_CORE="${LIB_CORE} moduls/protocol/UserProtocol/.libs/*.o "
	ModsIncl="${ModsIncl}prt_UserProtocol "
    fi
])
#> UI modules
AC_SUBST(UISub_mod)
AX_MOD_EN(VCAEngine,[disable or enable[=incl] build module UI.VCAEngine],disable,incl,
[
    AC_MSG_RESULT(Build module: UI.VCAEngine)
    AC_CONFIG_FILES(src/moduls/ui/VCAEngine/Makefile)
    UISub_mod="${UISub_mod}VCAEngine "
    if test $enable_VCAEngine = incl; then
	LIB_CORE="${LIB_CORE} moduls/ui/VCAEngine/.libs/*.o "
	ModsIncl="${ModsIncl}ui_VCAEngine "
    fi
])
AX_MOD_EN(Vision,[disable or enable[=incl] build module UI.Vision],disable,incl,
[
    AC_MSG_RESULT(Build module: UI.Vision)
    AC_CONFIG_FILES(src/moduls/ui/Vision/Makefile)
    UISub_mod="${UISub_mod}Vision "
    #>> Modules checkings
    AX_LIB_FFTW3()
    AX_LIB_QT4()
    PKG_CHECK_MODULES([phonon],[phonon > 4.3.0],[AC_DEFINE(HAVE_PHONON,1,[Phonon media player engine allow.])])
    if test $enable_Vision = incl; then
	LIB_CORE="${LIB_CORE} moduls/ui/Vision/.libs/*.o ${QT4_LIB} ${LIB_FFTW3} ${phonon_LIBS} "
	ModsIncl="${ModsIncl}ui_Vision "
    fi
])
AX_MOD_EN(QTStarter,[disable or enable[=incl] build module UI.QTStarter],disable,incl,
[
    AC_MSG_RESULT(Build module: UI.QTStarter)
    AC_CONFIG_FILES(src/moduls/ui/QTStarter/Makefile)
    UISub_mod="${UISub_mod}QTStarter "
    AX_LIB_QT4()
    if test $enable_QTStarter = incl; then
	LIB_CORE="${LIB_CORE} moduls/ui/QTStarter/.libs/*.o ${QT4_LIB} "
	ModsIncl="${ModsIncl}ui_QTStarter "
    fi
])
AX_MOD_EN(QTCfg,[disable or enable[=incl] build module UI.QTCfg],disable,incl,
[
    AC_MSG_RESULT(Build module: UI.QTCfg)
    AC_CONFIG_FILES(src/moduls/ui/QTCfg/Makefile)
    UISub_mod="${UISub_mod}QTCfg "
    AX_LIB_QT4()
    if test $enable_QTCfg = incl; then
	LIB_CORE="${LIB_CORE} moduls/ui/QTCfg/.libs/*.o ${QT4_LIB} "
	ModsIncl="${ModsIncl}ui_QTCfg "
    fi
])
AX_MOD_EN(WebCfg,[disable or enable[=incl] build module UI.WebCfg],disable,incl,
[
    AC_MSG_RESULT(Build module: UI.WebCfg)
    AC_CONFIG_FILES(src/moduls/ui/WebCfg/Makefile)
    UISub_mod="${UISub_mod}WebCfg "
    if test $enable_WebCfg = incl; then
	LIB_CORE="${LIB_CORE} moduls/ui/WebCfg/.libs/*.o "
	ModsIncl="${ModsIncl}ui_WebCfg "
    fi
])
AX_MOD_EN(WebCfgD,[disable or enable[=incl] build module UI.WebCfgD],disable,incl,
[
    AC_MSG_RESULT(Build module: UI.WebCfgD)
    AC_CONFIG_FILES(src/moduls/ui/WebCfgD/Makefile)
    UISub_mod="${UISub_mod}WebCfgD "
    AX_LIB_GD()
    if test $enable_WebCfgD = incl; then
	LIB_CORE="${LIB_CORE} moduls/ui/WebCfgD/.libs/*.o ${LIB_GD} "
	ModsIncl="${ModsIncl}ui_WebCfgD "
    fi
])
AX_MOD_EN(WebVision,[disable or enable[=incl] build module UI.WebVision],disable,incl,
[
    AC_MSG_RESULT(Build module: UI.WebVision)
    AC_CONFIG_FILES(src/moduls/ui/WebVision/Makefile)
    UISub_mod="${UISub_mod}WebVision "
    #>> Modules checkings
    AX_LIB_GD()
    AX_LIB_FFTW3()
    if test $enable_WebVision = incl; then
	LIB_CORE="${LIB_CORE} moduls/ui/WebVision/.libs/*.o ${LIB_GD} ${LIB_FFTW3} "
	ModsIncl="${ModsIncl}ui_WebVision "
    fi
])
AX_MOD_EN(WebUser,[disable or enable[=incl] build module UI.WebUser],disable,incl,
[
    AC_MSG_RESULT(Build module: UI.WebUser)
    AC_CONFIG_FILES(src/moduls/ui/WebUser/Makefile)
    UISub_mod="${UISub_mod}WebUser "
    if test $enable_WebUser = incl; then
	LIB_CORE="${LIB_CORE} moduls/ui/WebUser/.libs/*.o "
	ModsIncl="${ModsIncl}ui_WebUser "
    fi
])
#> Special modules
AC_SUBST(SpecSub_mod)
AX_MOD_EN(SystemTests,[disable build module Special.SystemTests],disable,[],
[
    AC_MSG_RESULT(Build module: Special.SystemTests)
    AC_CONFIG_FILES(src/moduls/special/SystemTests/Makefile)
    SpecSub_mod="${SpecSub_mod}SystemTests "
])
AX_MOD_EN(FLibComplex1,[disable or enable[=incl] build module Special.FLibComplex1],disable,incl,
[
    AC_MSG_RESULT(Build module: Special.FLibComplex1)
    AC_CONFIG_FILES(src/moduls/special/FLibComplex1/Makefile)
    SpecSub_mod="${SpecSub_mod}FLibComplex1 "
    if test $enable_FLibComplex1 = incl; then
	LIB_CORE="${LIB_CORE} moduls/special/FLibComplex1/.libs/*.o "
	ModsIncl="${ModsIncl}spec_FLibComplex1 "
    fi
])
AX_MOD_EN(FLibMath,[disable or enable[=incl] build module Special.FLibMath],disable,incl,
[
    AC_MSG_RESULT(Build module: Special.FLibMath)
    AC_CONFIG_FILES(src/moduls/special/FLibMath/Makefile)
    SpecSub_mod="${SpecSub_mod}FLibMath "
    if test $enable_FLibMath = incl; then
	LIB_CORE="${LIB_CORE} moduls/special/FLibMath/.libs/*.o "
	ModsIncl="${ModsIncl}spec_FLibMath "
    fi
])
AX_MOD_EN(FLibSYS,[disable or enable[=incl] build module Special.FLibSYS],disable,incl,
[
    AC_MSG_RESULT(Build module: Special.FLibSYS)
    AC_CONFIG_FILES(src/moduls/special/FLibSYS/Makefile)
    SpecSub_mod="${SpecSub_mod}FLibSYS "
    if test $enable_FLibSYS = incl; then
	LIB_CORE="${LIB_CORE} moduls/special/FLibSYS/.libs/*.o "
	ModsIncl="${ModsIncl}spec_FLibSYS "
    fi
    #>> Modules checkings
    AX_LIB_FFTW3()
])
AC_MSG_RESULT(===========================================)

AC_DEFINE_UNQUOTED(MODS_INCL, "${ModsIncl}",[Included to core modules list.])

# Clear libs list after PKG_CHECK_MODULES
LIBS=""

AC_OUTPUT

# I18N process place to *.am
if test $ac_cv_header_libintl_h = yes; then
    for ac_config_file in $ac_config_files; do
	sedRez=`cat $ac_config_file | sed -n '/^I18N_mod *= *\([[^ ]]*\)\$/s//\1/p'`
	if test "x$sedRez" != "x"; then
	    sed "s/\(^install:.*\)\$/\1 install-I18N/" $ac_config_file |
	    sed "s/\(^uninstall:.*\)\$/\1 uninstall-I18N/" |
	    sed "s/\(^clean:.*\)\$/\1 clean-I18N/" > $ac_config_file.prc
	    cat $ac_config_file.prc I18N.mk > $ac_config_file
	    rm $ac_config_file.prc
	fi
    done
fi

AC_MSG_RESULT([============ Final configuration results ==============])
AC_MSG_RESULT([* Status:])
AC_MSG_RESULT([  - Enable(yes)/disable(no) all modules                         = $enable_AllModuls])
AC_MSG_RESULT([  - Crosscompile build                                          = $enable_CrossCompile])
AC_MSG_RESULT([  - Core lib build only static                                  = $enable_CoreLibStatic])
AC_MSG_RESULT([* Generic features:])
AC_MSG_RESULT([  - Strings charset encode support (by iconv)                   = $ac_cv_header_iconv_h])
AC_MSG_RESULT([  - Interfaces internationalisation (I18N) support (by LibIntl) = $ac_cv_header_libintl_h])
AC_MSG_RESULT([  - Graphical library (LibGD2) use by core                      = $enable_LibGD])
AC_MSG_RESULT([  - Subsystem modules build:])
AC_MSG_RESULT([    "DB":                   $DBSub_mod])
AC_MSG_RESULT([    "DAQ":                  $DAQSub_mod])
AC_MSG_RESULT([    "Archive":              $ArchSub_mod])
AC_MSG_RESULT([    "Transport":            $TranspSub_mod])
AC_MSG_RESULT([    "Transport's protocol": $ProtSub_mod])
AC_MSG_RESULT([    "UI":                   $UISub_mod])
AC_MSG_RESULT([    "Special":              $SpecSub_mod])
AC_MSG_RESULT([  - Modules included to OpenSCADA core: $ModsIncl])
AC_MSG_RESULT([* Modules' features:])
AC_MSG_RESULT([  - FFTW3 for signal spectrum purchase: $LIB_FFTW3])
AC_MSG_RESULT([  - Linux sensors library use:          $LIB_SENSORS])
AC_MSG_RESULT([  - Media play engine:                  $phonon_LIBS])
